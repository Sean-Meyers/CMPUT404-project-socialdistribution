openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /services/authors/:
    get:
      operationId: retrieveAuthorModel
      description: Class for handling authors, with pagination and query params
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
      tags:
      - services
  /services/authors/{author_id}:
    get:
      operationId: retrieveAuthorModel
      description: Class for handling a single author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
      tags:
      - services
    post:
      operationId: createAuthorModel
      description: Class for handling a single author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/followers:
    get:
      operationId: retrieveFollowModel
      description: Class for handling followers of a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/followers/{foreign_author_id}:
    get:
      operationId: retrieveFollowModel
      description: Class for handling follows, can be used to create a new follow,
        get a follow, update a follow, delete a follow based on a given author_id
        and foreign_author_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: foreign_author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
      tags:
      - services
    put:
      operationId: updateFollowModel
      description: Class for handling follows, can be used to create a new follow,
        get a follow, update a follow, delete a follow based on a given author_id
        and foreign_author_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: foreign_author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
      tags:
      - services
    patch:
      operationId: partialUpdateFollowModel
      description: Class for handling follows, can be used to create a new follow,
        get a follow, update a follow, delete a follow based on a given author_id
        and foreign_author_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: foreign_author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
      tags:
      - services
    delete:
      operationId: destroyFollowModel
      description: Class for handling follows, can be used to create a new follow,
        get a follow, update a follow, delete a follow based on a given author_id
        and foreign_author_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: foreign_author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - services
  /services/authors/{author_id}/posts:
    get:
      operationId: listPostsModels
      description: Class for handling the posts of a given author, can be used to
        create a new post or get all posts of a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
    post:
      operationId: createPostsModel
      description: Class for handling the posts of a given author, can be used to
        create a new post or get all posts of a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/posts/{post_id}:
    get:
      operationId: retrievePostsModel
      description: Class for handling posts, can be used to create a new post, get
        a post, update a post, delete a post based on a given post_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
    post:
      operationId: createPostsModel
      description: Class for handling posts, can be used to create a new post, get
        a post, update a post, delete a post based on a given post_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
    put:
      operationId: updatePostsModel
      description: Class for handling posts, can be used to create a new post, get
        a post, update a post, delete a post based on a given post_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
    patch:
      operationId: partialUpdatePostsModel
      description: Class for handling posts, can be used to create a new post, get
        a post, update a post, delete a post based on a given post_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
      tags:
      - services
    delete:
      operationId: destroyPostsModel
      description: Class for handling posts, can be used to create a new post, get
        a post, update a post, delete a post based on a given post_id.
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - services
  /services/authors/{author_id}/posts/{post_id}/comments:
    get:
      operationId: listCommentsModels
      description: Class for handling the comments of a given post, can be used to
        create a new comment or get all comments of a given post
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comments'
          description: ''
      tags:
      - services
    post:
      operationId: createCommentsModel
      description: Class for handling the comments of a given post, can be used to
        create a new comment or get all comments of a given post
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comments'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/posts/{post_id}/likes:
    get:
      operationId: listLikeModels
      description: Class for handling the likes of a given post, can be used to get
        all likes of a given post
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Like'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/posts/{post_id}/comments/{comment_id}:
    get:
      operationId: retrieveLikeModel
      description: Class for handling the likes of a given comment, can be used to
        get all likes of a given comment
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: post_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/liked:
    get:
      operationId: listLikeModels
      description: Class for handling the likes of a given post, can be used to get
        all likes of a given post
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Like'
          description: ''
      tags:
      - services
  /services/authors/{author_id}/inbox:
    get:
      operationId: listInboxModels
      description: Class for handling the inbox of a given author, can be used to
        get all inbox items of a given author, delete all inbox items of a given author,
        or create a new inbox item for a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Inbox'
          description: ''
      tags:
      - services
    post:
      operationId: createInboxModel
      description: Class for handling the inbox of a given author, can be used to
        get all inbox items of a given author, delete all inbox items of a given author,
        or create a new inbox item for a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inbox'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inbox'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Inbox'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: ''
      tags:
      - services
    delete:
      operationId: destroyInboxModel
      description: Class for handling the inbox of a given author, can be used to
        get all inbox items of a given author, delete all inbox items of a given author,
        or create a new inbox item for a given author
      parameters:
      - name: author_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - services
  /auth/register/:
    post:
      operationId: createUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
          format: uri
          readOnly: true
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        type:
          type: string
          maxLength: 100
        host:
          type: string
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        url:
          type: string
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        displayName:
          type: string
          maxLength: 100
        github:
          type: string
          format: uuid
        profileImage:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
    Follow:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          maxLength: 100
        status:
          enum:
          - accepted
          - rejected
          - pending
          type: string
        following:
          type: string
        follower:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
    Posts:
      type: object
      properties:
        id:
          type: string
          format: uri
          readOnly: true
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        type:
          type: string
          maxLength: 100
        title:
          type: string
          maxLength: 100
        source:
          type: string
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        origin:
          type: string
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        description:
          type: string
        contentType:
          type: string
          maxLength: 100
        content:
          type: string
        categories:
          type: array
          items:
            type: string
        count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        published:
          type: string
          format: date-time
          readOnly: true
        visibility:
          enum:
          - PUBLIC
          - FRIENDS
          type: string
        unlisted:
          type: boolean
        author:
          type: object
          properties:
            id:
              type: string
              format: uri
              readOnly: true
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            type:
              type: string
              maxLength: 100
            host:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            url:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            displayName:
              type: string
              maxLength: 100
            github:
              type: string
              format: uuid
            profileImage:
              type: string
            created_at:
              type: string
              format: date-time
              readOnly: true
      required:
      - author
    Comments:
      type: object
      properties:
        id:
          type: string
          format: uri
          readOnly: true
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        type:
          type: string
          maxLength: 100
        author:
          type: object
          properties:
            id:
              type: string
              format: uri
              readOnly: true
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            type:
              type: string
              maxLength: 100
            host:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            url:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            displayName:
              type: string
              maxLength: 100
            github:
              type: string
              format: uuid
            profileImage:
              type: string
            created_at:
              type: string
              format: date-time
              readOnly: true
        comment:
          type: string
        host:
          type: string
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        contentType:
          type: string
          maxLength: 100
        published:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        summary:
          type: string
        type:
          type: string
          maxLength: 100
        author:
          type: object
          properties:
            id:
              type: string
              format: uri
              readOnly: true
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            type:
              type: string
              maxLength: 100
            host:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            url:
              type: string
              format: uri
              maxLength: 200
              pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
                .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
                ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF\
                0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
                -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\\
                s]*)?\\z"
            displayName:
              type: string
              maxLength: 100
            github:
              type: string
              format: uuid
            profileImage:
              type: string
            created_at:
              type: string
              format: date-time
              readOnly: true
        object:
          type: string
          format: uri
          readOnly: true
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        post:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
    Inbox:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          enum:
          - post
          - comment
          - follow
          - like
          type: string
        author:
          type: string
          nullable: true
        object:
          type: object
        created_at:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
