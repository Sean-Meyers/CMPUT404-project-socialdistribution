"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/authors/[author_id]/posts/[post_id]";
exports.ids = ["pages/api/authors/[author_id]/posts/[post_id]"];
exports.modules = {

/***/ "form-data":
/*!****************************!*\
  !*** external "form-data" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("form-data");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "uuidv4":
/*!*************************!*\
  !*** external "uuidv4" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("uuidv4");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "(api)/./src/nodes/api-client.ts":
/*!*********************************!*\
  !*** ./src/nodes/api-client.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass API {\n    constructor(axiosConfig){\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: \"/api\",\n            ...axiosConfig\n        });\n    }\n    async getAuthors(page = 1, size = 25, query = \"\") {\n        try {\n            const results = await this.axiosInstance.get(`/authors/`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async isPostLiked(postId, authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/liked`, {\n                params: {\n                    postId\n                }\n            });\n            return result.data;\n        } catch (e) {\n            return false;\n        }\n    }\n    async isCommentLiked(commentId, authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/liked`, {\n                params: {\n                    commentId\n                }\n            });\n            return result.data;\n        } catch (e) {\n            return false;\n        }\n    }\n    async getAuthor(authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}`);\n            return result.data;\n        } catch (e) {\n            return null;\n        }\n    }\n    async createAuthor(author) {\n        try {\n            await this.axiosInstance.post(`/authors/`, author);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async updateAuthor(authorId, data) {\n        try {\n            const result = await this.axiosInstance.put(`/authors/${authorId}`, data);\n            return result.data;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getFollowers(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/followers`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async addFollower(authorId, foreignAuthorId) {\n        const FOLLOWER_ENDPOINT = `/authors/${authorId}/followers/${foreignAuthorId}`;\n        try {\n            await this.axiosInstance.put(FOLLOWER_ENDPOINT, {\n                status: \"friends\"\n            });\n            let actor = await this.getAuthor(foreignAuthorId);\n            let object = await this.getAuthor(authorId);\n            if (actor && object) {\n                await this.sendToInbox(foreignAuthorId, {\n                    type: \"follow\",\n                    summary: `${object.displayName} accepted your follow request`,\n                    actor: actor,\n                    object: object\n                });\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n    async checkFollowerStatus(authorId, foreignAuthorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/followers/${foreignAuthorId}`);\n            return result.data;\n        } catch (e) {\n            return \"not_friends\";\n        }\n    }\n    async removeFollower(authorId, foreignAuthorId) {\n        if (authorId === foreignAuthorId && authorId === \"\") {\n            throw new Error(\"Cannot remove yourself as a follower\");\n        }\n        return await this.axiosInstance.delete(`/authors/${authorId}/followers/${foreignAuthorId}`, {\n            timeout: 5000\n        });\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        let authorId = authorTo?.id?.split(\"/\").pop();\n        await this.axiosInstance.post(`/authors/${authorId}/follow-request`, {\n            type: \"follow\",\n            summary: `${authorFrom?.displayName || \"Someone\"} wants to follow you`,\n            actor: authorFrom,\n            object: authorTo\n        });\n    }\n    async getPost(authorId, postId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/posts/${postId}`);\n            return result.data;\n        } catch (e) {\n            console.error(e);\n            return null;\n        }\n    }\n    async deletePost(authorId, postId) {\n        try {\n            return await this.axiosInstance.delete(`/authors/${authorId}/posts/${postId}`);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async getPosts(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/posts/`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            console.error(e);\n            return {\n                type: \"posts\",\n                items: []\n            };\n        }\n    }\n    async alertNewPost(authorId, post) {\n        // Goes to everyones inbox\n        let followers = await this.getFollowers(authorId);\n        if (!followers.items) {\n            return;\n        }\n        let followerList = followers.items;\n        await Promise.all(followerList.map(async (follower)=>{\n            if (!follower.id) {\n                return;\n            }\n            let followerId = follower.id.split(\"/\").pop();\n            if (post.visibility === \"UNLISTED\") {\n                return;\n            } else if (post.visibility === \"PRIVATE\") {\n                let status = await this.checkFollowerStatus(followerId || \"\", authorId);\n                if (status == \"true_friends\") {\n                    await this.sendToInbox(followerId || \"\", post);\n                }\n            } else {\n                await this.sendToInbox(followerId || \"\", post);\n            }\n        }));\n        // Add to author's inbox\n        await this.sendToInbox(authorId, post);\n    }\n    async alertNewPostAuthors(authorId, post, authors) {\n        await Promise.all(authors.map(async (author)=>{\n            author = author.split(\"/\").pop() || \"\";\n            await this.sendToInbox(author, post);\n        }));\n        // Add to author's inbox\n        await this.sendToInbox(authorId, post);\n    }\n    async updatePost(authorId, postId, post) {\n        const result = await this.axiosInstance.put(`/authors/${authorId}/posts/${postId}`, post);\n        return result.data;\n    }\n    async createPost(authorId, post) {\n        try {\n            let result = await this.axiosInstance.post(`/authors/${authorId}/posts/`, post);\n            return result.data;\n        } catch (e) {\n            console.error(e);\n            return null;\n        }\n    }\n    async getComments(authorId, postId, page = 1, size = 10) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/posts/${postId}/comments?page=${page}&size=${size}`);\n            if (results.data.comments === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            console.error(e);\n            return {\n                type: \"comments\",\n                page: 0,\n                size: 0,\n                comments: [],\n                post: \"\",\n                id: \"\"\n            };\n        }\n    }\n    async createComment(authorId, postId, comment) {\n        try {\n            const result = await this.axiosInstance.post(`/authors/${authorId}/posts/${postId}/comments`, comment);\n            return result.data;\n        } catch (e) {\n            throw e;\n        }\n    }\n    async createLike(authorId, post, authorFrom) {\n        try {\n            await this.sendToInbox(authorId, {\n                \"@context\": \"https://www.w3.org/ns/activitystreams\",\n                \"summary\": `${authorFrom.displayName} liked your post: ${post.title}`,\n                type: \"like\",\n                author: authorFrom,\n                object: post.id\n            });\n        } catch (e) {\n            throw e;\n        }\n    }\n    async createCommentLike(authorId, comment, authorFrom) {\n        try {\n            await this.sendToInbox(authorId, {\n                \"@context\": \"https://www.w3.org/ns/activitystreams\",\n                \"summary\": `${authorFrom.displayName} liked your comment`,\n                type: \"like\",\n                author: authorFrom,\n                object: comment?.id || \"\"\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async getLiked(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/liked`);\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"likes\",\n                items: []\n            };\n        }\n    }\n    async sendToInbox(authorId, activity) {\n        const result = await this.axiosInstance.post(`/authors/${authorId}/inbox/`, activity, {\n            timeout: 4000\n        });\n        return result.data;\n    }\n    async getInbox(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/inbox/`);\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"inbox\",\n                author: \"\",\n                items: []\n            };\n        }\n    }\n    async clearInbox(authorId) {\n        await this.axiosInstance.delete(`/authors/${authorId}/inbox/`);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/api-client.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/api.ts":
/*!**************************!*\
  !*** ./src/nodes/api.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var uuidv4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuidv4 */ \"uuidv4\");\n/* harmony import */ var uuidv4__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuidv4__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass API {\n    constructor(apiURL, axiosConfig, nodeType = \"local\"){\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: apiURL,\n            ...axiosConfig\n        });\n        this.nodeType = nodeType;\n        this.apiURL = apiURL;\n    }\n    getNodeType() {\n        return this.nodeType;\n    }\n    async getAuthors(page = 1, size = 25, query = \"\") {\n        try {\n            const results = await this.axiosInstance.get(`/authors/`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async isPostLiked(postId, authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/liked`);\n            const likes = result.data.items;\n            if (likes === undefined) {\n                return false;\n            }\n            for (const like of likes){\n                if (like.object?.includes(postId)) {\n                    return true;\n                }\n            }\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n    async isCommentLiked(commentId, authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/liked`);\n            if (result.data.items === undefined) {\n                return false;\n            }\n            const likes = result.data.items;\n            for (const like of likes){\n                if (like.object && like.object.includes(commentId)) {\n                    return true;\n                }\n            }\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n    async getAuthor(authorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}`);\n            return result.data;\n        } catch (e) {\n            return null;\n        }\n    }\n    async createAuthor(author) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            await this.axiosInstance.post(`/authors/`, author);\n        } catch (e) {}\n    }\n    async updateAuthor(authorId, data) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            const result = await this.axiosInstance.put(`/authors/${authorId}`, data);\n            return result.data;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getFollowers(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/followers`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async addFollower(authorId, foreignAuthorId) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        await this.axiosInstance.put(`/authors/${authorId}/followers/${foreignAuthorId}`, {\n            status: \"friends\"\n        });\n    }\n    async checkFollowerStatus(authorId, foreignAuthorId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/followers/${foreignAuthorId}`);\n            return result.data;\n        } catch (e) {\n            return \"not_friends\";\n        }\n    }\n    async removeFollower(authorId, foreignAuthorId) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        return await this.axiosInstance.delete(`/authors/${authorId}/followers/${foreignAuthorId}`);\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        try {\n            if (authorTo.id) {\n                let authorId = authorTo.id.split(\"/\").pop();\n                await this.sendToInbox(authorId || \"\", {\n                    type: \"follow\",\n                    summary: `${authorFrom?.displayName || \"Someone\"} wants to follow you`,\n                    actor: authorFrom,\n                    object: authorTo\n                });\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async getPost(authorId, postId) {\n        try {\n            const result = await this.axiosInstance.get(`/authors/${authorId}/posts/${postId}`);\n            return result.data;\n        } catch (e) {\n            return null;\n        }\n    }\n    async deletePost(authorId, postId) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            return await this.axiosInstance.delete(`/authors/${authorId}/posts/${postId}`);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async getPosts(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/posts/`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"posts\",\n                items: []\n            };\n        }\n    }\n    async alertNewPost(authorId, post) {\n        // Goes to everyones inbox\n        let followers = await this.getFollowers(authorId);\n        if (!followers.items) return;\n        let followerList = followers.items;\n        Promise.all(followerList.map(async (follower)=>{\n            if (!follower.id) return;\n            let followerId = follower.id.split(\"/\").pop();\n            if (post.visibility === \"UNLISTED\") {\n                return;\n            } else if (post.visibility === \"PRIVATE\") {\n                let status = await this.checkFollowerStatus(followerId || \"\", authorId);\n                if (status == \"true_friends\") {\n                    await this.sendToInbox(followerId || \"\", post);\n                }\n            } else {\n                await this.sendToInbox(followerId || \"\", post);\n            }\n        }));\n        // Add to author's inbox\n        await this.sendToInbox(authorId, post);\n    }\n    async sendPrivatePost(authorId, post, recipient) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            await this.sendToInbox(authorId, post);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async updatePost(authorId, postId, post) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        const result = await this.axiosInstance.put(`/authors/${authorId}/posts/${postId}`, post);\n        return result.data;\n    }\n    async createPost(authorId, post) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            let result = await this.axiosInstance.post(`/authors/${authorId}/posts/`, post);\n            return result.data;\n        } catch (e) {\n            console.error(e);\n            return null;\n        }\n    }\n    async getComments(authorId, postId, page = 1, size = 10) {\n        try {\n            let results = await this.axiosInstance.get(`/authors/${authorId}/posts/${postId}/comments`);\n            //@ts-ignore\n            if (results.data.items) {\n                //@ts-ignore\n                results.data.comments = results.data.items;\n            }\n            if (results.data.comments === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"comments\",\n                page: 0,\n                size: 0,\n                comments: [],\n                post: \"\",\n                id: \"\"\n            };\n        }\n    }\n    async createComment(authorId, postId, comment) {\n        comment.id = comment.author?.id + \"/posts/\" + postId + \"/comments/\" + (0,uuidv4__WEBPACK_IMPORTED_MODULE_1__.uuid)();\n        try {\n            await this.sendToInbox(authorId || \"\", comment);\n            return comment;\n        } catch (e) {\n            return null;\n        }\n    }\n    async createLike(authorId, post, authorFrom) {\n        await this.sendToInbox(authorId, {\n            \"@context\": \"https://www.w3.org/ns/activitystreams\",\n            \"summary\": `${authorFrom.displayName} liked your post: ${post.title}`,\n            type: \"like\",\n            author: authorFrom,\n            object: post.id\n        });\n    }\n    async createCommentLike(authorId, comment, authorFrom) {\n        await this.sendToInbox(authorId, {\n            \"@context\": \"https://www.w3.org/ns/activitystreams\",\n            \"summary\": `${authorFrom.displayName} liked your comment`,\n            type: \"like\",\n            author: authorFrom,\n            object: comment?.id || \"\"\n        });\n    }\n    async getLiked(authorId) {\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/liked`);\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"likes\",\n                items: []\n            };\n        }\n    }\n    async sendToInbox(authorId, activity) {\n        const result = await this.axiosInstance.post(`/authors/${authorId}/inbox/`, activity);\n        return result.data;\n    }\n    async getInbox(authorId) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/inbox/`);\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"inbox\",\n                author: \"\",\n                items: []\n            };\n        }\n    }\n    async clearInbox(authorId) {\n        if (this.nodeType === \"remote\") {\n            throw new Error(\"Remote nodes do not support this operation\");\n        }\n        const result = await this.axiosInstance.delete(`/authors/${authorId}/inbox/`);\n        return result.data;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/api.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/index.ts":
/*!****************************!*\
  !*** ./src/nodes/index.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NodeClient\": () => (/* binding */ NodeClient),\n/* harmony export */   \"NodeManager\": () => (/* binding */ NodeManager),\n/* harmony export */   \"getURL\": () => (/* binding */ getURL)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(api)/./src/nodes/api.ts\");\n/* harmony import */ var _api_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api-client */ \"(api)/./src/nodes/api-client.ts\");\n/* harmony import */ var _node_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node-manager */ \"(api)/./src/nodes/node-manager.ts\");\n/* harmony import */ var _node_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node-client */ \"(api)/./src/nodes/node-client.ts\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _schemas_t7_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schemas/t7/api */ \"(api)/./src/nodes/schemas/t7/api.ts\");\n/* harmony import */ var _schemas_t12_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schemas/t12/api */ \"(api)/./src/nodes/schemas/t12/api.ts\");\n/* harmony import */ var _schemas_t17_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./schemas/t17/api */ \"(api)/./src/nodes/schemas/t17/api.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_0__, _api_client__WEBPACK_IMPORTED_MODULE_1__, _node_manager__WEBPACK_IMPORTED_MODULE_2__, _schemas_t7_api__WEBPACK_IMPORTED_MODULE_5__, _schemas_t12_api__WEBPACK_IMPORTED_MODULE_6__, _schemas_t17_api__WEBPACK_IMPORTED_MODULE_7__]);\n([_api__WEBPACK_IMPORTED_MODULE_0__, _api_client__WEBPACK_IMPORTED_MODULE_1__, _node_manager__WEBPACK_IMPORTED_MODULE_2__, _schemas_t7_api__WEBPACK_IMPORTED_MODULE_5__, _schemas_t12_api__WEBPACK_IMPORTED_MODULE_6__, _schemas_t17_api__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nconst Team7 = new _schemas_t7_api__WEBPACK_IMPORTED_MODULE_5__[\"default\"](\"https://sd7-api.herokuapp.com\" || 0, {\n    auth: {\n        username: \"node01\" || 0,\n        password: \"P*ssw0rd!\" || 0\n    }\n});\nconst Team12 = new _schemas_t12_api__WEBPACK_IMPORTED_MODULE_6__[\"default\"](\"https://cmput404-project-data.herokuapp.com\" || 0, {\n    auth: {\n        username: \"username1\" || 0,\n        password: \"123\" || 0\n    }\n});\nconst Team17 = new _schemas_t17_api__WEBPACK_IMPORTED_MODULE_7__[\"default\"](\"https://social-distribution-w23-t17.herokuapp.com\" || 0, {\n    auth: {\n        username: \"remote-user-t16\" || 0,\n        password: \"Th!sIsF1ne\" || 0\n    },\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Referer\": \"https://social-distribution-w23-t17.herokuapp.com\"\n    }\n});\nconst LocalNode = new _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"https://sd16-api.herokuapp.com/service\" || 0, {\n    auth: {\n        username: \"admin\" || 0,\n        password: \"123\" || 0\n    }\n}, \"local\");\nconst nodeManager = new _node_manager__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({});\nconst getURL = (fullUrl)=>{\n    const parsedUrl = url__WEBPACK_IMPORTED_MODULE_4___default().parse(fullUrl);\n    let port = parsedUrl.port;\n    if (parsedUrl.port === \"80\" || parsedUrl.port === \"443\" || parsedUrl.port === null) {\n        port = \"\";\n    } else {\n        port = `:${parsedUrl.port}`;\n    }\n    const baseUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}${port}`;\n    return baseUrl;\n};\nnodeManager.addNode(getURL(\"https://sd16-api.herokuapp.com/service\" || 0), LocalNode);\nnodeManager.addNode(getURL(\"https://sd7-api.herokuapp.com\" || 0), Team7);\nnodeManager.addNode(getURL(\"https://cmput404-project-data.herokuapp.com\" || 0), Team12);\nnodeManager.addNode(getURL(\"https://social-distribution-w23-t17.herokuapp.com\" || 0), Team17);\nconst NextAPI = new _api_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\nconst nodeClient = new _node_client__WEBPACK_IMPORTED_MODULE_3__[\"default\"](NextAPI);\nconst globalValues = global;\nconst NodeManager = globalValues.NodeManager || nodeManager;\nconst NodeClient = globalValues.NodeClient || nodeClient;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ2E7QUFDQTtBQUNGO0FBQ2I7QUFFYztBQUNFO0FBQ0E7QUFFdEMsTUFBTVEsUUFBUSxJQUFJSCx1REFBSUEsQ0FBRUksK0JBQWtDLElBQUksR0FBaUM7SUFDM0ZHLE1BQUs7UUFDREMsVUFBVUosUUFBZ0MsSUFBSSxDQUF3QjtRQUN0RU0sVUFBVU4sV0FBNkIsSUFBSSxDQUF3QjtJQUN2RTtBQUNKO0FBRUEsTUFBTVEsU0FBUyxJQUFJWCx3REFBS0EsQ0FBRUcsNkNBQW1DLElBQUksR0FBK0M7SUFDNUdHLE1BQUs7UUFDREMsVUFBVUosV0FBaUMsSUFBSSxDQUF3QjtRQUN2RU0sVUFBVU4sS0FBOEIsSUFBSSxDQUF3QjtJQUN4RTtBQUNKO0FBRUEsTUFBTVksU0FBUyxJQUFJZCx3REFBS0EsQ0FBQ0UsbURBQW1DLElBQUksR0FBcUQ7SUFDakhHLE1BQUs7UUFDREMsVUFBVUosaUJBQWlDLElBQUksQ0FBd0I7UUFDdkVNLFVBQVVOLFlBQThCLElBQUksQ0FBd0I7SUFDeEU7SUFFQWdCLFNBQVM7UUFDTCxnQkFBZ0I7UUFDaEIsVUFBVTtRQUNWLFdBQVc7SUFDZDtBQUNMO0FBRUEsTUFBTUMsWUFBWSxJQUFJMUIsNENBQUdBLENBQUNTLHdDQUErQixJQUFJLEdBQWlDO0lBQzFGRyxNQUFLO1FBQ0RDLFVBQVVKLE9BQWdDLElBQUksQ0FBd0I7UUFDdEVNLFVBQVVOLEtBQTZCLElBQUksQ0FBd0I7SUFDdkU7QUFDSixHQUFHO0FBR0gsTUFBTXFCLGNBQWMsSUFBSTVCLHFEQUFPQSxDQUFDLENBQUM7QUFFMUIsTUFBTTZCLFNBQVMsQ0FBQ0MsVUFBb0I7SUFDdkMsTUFBTUMsWUFBWTdCLGdEQUFTLENBQUM0QjtJQUNoQyxJQUFJRyxPQUFPRixVQUFVRSxJQUFJO0lBQ3JCLElBQUlGLFVBQVVFLElBQUksS0FBSyxRQUFRRixVQUFVRSxJQUFJLEtBQUssU0FBU0YsVUFBVUUsSUFBSSxLQUFLLElBQUksRUFBRTtRQUNoRkEsT0FBTztJQUNYLE9BQ0s7UUFDREEsT0FBTyxDQUFDLENBQUMsRUFBRUYsVUFBVUUsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNMLE1BQU1DLFVBQVUsQ0FBQyxFQUFFSCxVQUFVSSxRQUFRLENBQUMsRUFBRSxFQUFFSixVQUFVSyxRQUFRLENBQUMsRUFBRUgsS0FBSyxDQUFDO0lBQ2pFLE9BQU9DO0FBQ1gsRUFBQztBQUVETixZQUFZUyxPQUFPLENBQUNSLE9BQU90Qix3Q0FBK0IsSUFBSSxJQUFrQ2lCO0FBQ2hHSSxZQUFZUyxPQUFPLENBQUNSLE9BQU90QiwrQkFBa0MsSUFBSSxJQUFzQ0Q7QUFDdkdzQixZQUFZUyxPQUFPLENBQUNSLE9BQU90Qiw2Q0FBbUMsSUFBSSxJQUF3RFE7QUFDMUhhLFlBQVlTLE9BQU8sQ0FBQ1IsT0FBT3RCLG1EQUFtQyxJQUFJLElBQXNEWTtBQUV4SCxNQUFNbUIsVUFBVSxJQUFJdkMsbURBQVNBO0FBRTdCLE1BQU13QyxhQUFhLElBQUl0QyxvREFBTUEsQ0FBQ3FDO0FBRTlCLE1BQU1FLGVBQWVDO0FBS2QsTUFBTUMsY0FBY0YsYUFBYUUsV0FBVyxJQUFJZCxZQUFZO0FBQzVELE1BQU1lLGFBQWFILGFBQWFHLFVBQVUsSUFBSUosV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL2luZGV4LnRzPzJkMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFQSSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCBBUElDbGllbnQgZnJvbSBcIi4vYXBpLWNsaWVudFwiO1xuaW1wb3J0IE1hbmFnZXIgZnJvbSBcIi4vbm9kZS1tYW5hZ2VyXCI7XG5pbXBvcnQgQ2xpZW50IGZyb20gXCIuL25vZGUtY2xpZW50XCI7XG5pbXBvcnQgdXJsIGZyb20gXCJ1cmxcIjtcblxuaW1wb3J0IEFQSTcgZnJvbSAnLi9zY2hlbWFzL3Q3L2FwaSc7XG5pbXBvcnQgQVBJMTIgZnJvbSBcIi4vc2NoZW1hcy90MTIvYXBpXCI7XG5pbXBvcnQgQVBJMTcgZnJvbSBcIi4vc2NoZW1hcy90MTcvYXBpXCI7XG5cbmNvbnN0IFRlYW03ID0gbmV3IEFQSTcoIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1Q3X0FQSV9VUkwgfHwgJ2h0dHBzOi8vc2Q3LWFwaS5oZXJva3VhcHAuY29tJywge1xuICAgIGF1dGg6e1xuICAgICAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDdfVU5BTUUgfHwgXCJjcmVkZW50aWFsIGVudiBmYWlsdXJlXCIsXG4gICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19UN19QVyB8fCBcImNyZWRlbnRpYWwgZW52IGZhaWx1cmVcIlxuICAgIH1cbn0pO1xuXG5jb25zdCBUZWFtMTIgPSBuZXcgQVBJMTIoIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1QxMl9BUElfVVJMIHx8ICdodHRwczovL2NtcHV0NDA0LXByb2plY3QtZGF0YS5oZXJva3VhcHAuY29tJywge1xuICAgIGF1dGg6e1xuICAgICAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDEyX1VOQU1FIHx8IFwiY3JlZGVudGlhbCBlbnYgZmFpbHVyZVwiLFxuICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDEyX1BXIHx8IFwiY3JlZGVudGlhbCBlbnYgZmFpbHVyZVwiXG4gICAgfVxufSk7XG5cbmNvbnN0IFRlYW0xNyA9IG5ldyBBUEkxNyhwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19UMTdfQVBJX1VSTCB8fCAnaHR0cHM6Ly9zb2NpYWwtZGlzdHJpYnV0aW9uLXcyMy10MTcuaGVyb2t1YXBwLmNvbScsIHtcbiAgICBhdXRoOntcbiAgICAgICAgdXNlcm5hbWU6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1QxN19VTkFNRSB8fCBcImNyZWRlbnRpYWwgZW52IGZhaWx1cmVcIixcbiAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1QxN19QVyB8fCBcImNyZWRlbnRpYWwgZW52IGZhaWx1cmVcIlxuICAgIH0sXG4gICAgXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3NvY2lhbC1kaXN0cmlidXRpb24tdzIzLXQxNy5oZXJva3VhcHAuY29tJywgXG4gICAgIH1cbn0pO1xuXG5jb25zdCBMb2NhbE5vZGUgPSBuZXcgQVBJKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zZXJ2aWNlJywge1xuICAgIGF1dGg6e1xuICAgICAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRkVfVU5BTUUgfHwgXCJjcmVkZW50aWFsIGVudiBmYWlsdXJlXCIsXG4gICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GRV9QVyB8fCBcImNyZWRlbnRpYWwgZW52IGZhaWx1cmVcIlxuICAgIH1cbn0sICdsb2NhbCcpO1xuXG5cbmNvbnN0IG5vZGVNYW5hZ2VyID0gbmV3IE1hbmFnZXIoe30pO1xuXG5leHBvcnQgY29uc3QgZ2V0VVJMID0gKGZ1bGxVcmw6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IHVybC5wYXJzZShmdWxsVXJsKTtcbmxldCBwb3J0ID0gcGFyc2VkVXJsLnBvcnQ7XG4gICAgaWYgKHBhcnNlZFVybC5wb3J0ID09PSAnODAnIHx8IHBhcnNlZFVybC5wb3J0ID09PSAnNDQzJyB8fCBwYXJzZWRVcmwucG9ydCA9PT0gbnVsbCkge1xuICAgICAgICBwb3J0ID0gJyc7XG4gICAgfSBcbiAgICBlbHNlIHsgXG4gICAgICAgIHBvcnQgPSBgOiR7cGFyc2VkVXJsLnBvcnR9YDtcbiAgICB9XG5jb25zdCBiYXNlVXJsID0gYCR7cGFyc2VkVXJsLnByb3RvY29sfS8vJHtwYXJzZWRVcmwuaG9zdG5hbWV9JHtwb3J0fWA7XG4gICAgcmV0dXJuIGJhc2VVcmw7XG59XG5cbm5vZGVNYW5hZ2VyLmFkZE5vZGUoZ2V0VVJMKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zZXJ2aWNlJyksIExvY2FsTm9kZSk7XG5ub2RlTWFuYWdlci5hZGROb2RlKGdldFVSTChwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19UN19BUElfVVJMIHx8ICdodHRwczovL3NkNy1hcGkuaGVyb2t1YXBwLmNvbS9hcGknKSwgVGVhbTcpO1xubm9kZU1hbmFnZXIuYWRkTm9kZShnZXRVUkwocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDEyX0FQSV9VUkwgfHwgJ2h0dHBzOi8vY21wdXQ0MDQtcHJvamVjdC1kYXRhLmhlcm9rdWFwcC5jb20vc2VydmljZScpLCBUZWFtMTIpO1xubm9kZU1hbmFnZXIuYWRkTm9kZShnZXRVUkwocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDE3X0FQSV9VUkwgfHwgJ2h0dHBzOi8vc29jaWFsLWRpc3RyaWJ1dGlvbi13MjMtdDE3Lmhlcm9rdWFwcC5jb20nKSwgVGVhbTE3KTtcblxuY29uc3QgTmV4dEFQSSA9IG5ldyBBUElDbGllbnQoKTtcblxuY29uc3Qgbm9kZUNsaWVudCA9IG5ldyBDbGllbnQoTmV4dEFQSSk7XG5cbmNvbnN0IGdsb2JhbFZhbHVlcyA9IGdsb2JhbCBhcyB1bmtub3duIGFzIHtcbiAgICBOb2RlQ2xpZW50OiBDbGllbnQ7XG4gICAgTm9kZU1hbmFnZXI6IE1hbmFnZXI7XG59XG5cbmV4cG9ydCBjb25zdCBOb2RlTWFuYWdlciA9IGdsb2JhbFZhbHVlcy5Ob2RlTWFuYWdlciB8fCBub2RlTWFuYWdlcjtcbmV4cG9ydCBjb25zdCBOb2RlQ2xpZW50ID0gZ2xvYmFsVmFsdWVzLk5vZGVDbGllbnQgfHwgbm9kZUNsaWVudDtcbiJdLCJuYW1lcyI6WyJBUEkiLCJBUElDbGllbnQiLCJNYW5hZ2VyIiwiQ2xpZW50IiwidXJsIiwiQVBJNyIsIkFQSTEyIiwiQVBJMTciLCJUZWFtNyIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19UN19BUElfVVJMIiwiYXV0aCIsInVzZXJuYW1lIiwiTkVYVF9QVUJMSUNfVDdfVU5BTUUiLCJwYXNzd29yZCIsIk5FWFRfUFVCTElDX1Q3X1BXIiwiVGVhbTEyIiwiTkVYVF9QVUJMSUNfVDEyX0FQSV9VUkwiLCJORVhUX1BVQkxJQ19UMTJfVU5BTUUiLCJORVhUX1BVQkxJQ19UMTJfUFciLCJUZWFtMTciLCJORVhUX1BVQkxJQ19UMTdfQVBJX1VSTCIsIk5FWFRfUFVCTElDX1QxN19VTkFNRSIsIk5FWFRfUFVCTElDX1QxN19QVyIsImhlYWRlcnMiLCJMb2NhbE5vZGUiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiTkVYVF9QVUJMSUNfRkVfVU5BTUUiLCJORVhUX1BVQkxJQ19GRV9QVyIsIm5vZGVNYW5hZ2VyIiwiZ2V0VVJMIiwiZnVsbFVybCIsInBhcnNlZFVybCIsInBhcnNlIiwicG9ydCIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiYWRkTm9kZSIsIk5leHRBUEkiLCJub2RlQ2xpZW50IiwiZ2xvYmFsVmFsdWVzIiwiZ2xvYmFsIiwiTm9kZU1hbmFnZXIiLCJOb2RlQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/index.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/node-client.ts":
/*!**********************************!*\
  !*** ./src/nodes/node-client.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass NodeClient {\n    constructor(APIInstance){\n        this.APIInstance = APIInstance;\n    }\n    async checkAuthorExists(authorId) {\n        const author = await this.APIInstance.getAuthor(authorId);\n        return author !== null;\n    }\n    async getAuthor(authorId) {\n        return await this.APIInstance.getAuthor(authorId);\n    }\n    async createAuthor(author) {\n        return await this.APIInstance.createAuthor(author);\n    }\n    async getAuthors(page = 0, size = 25, query = \"\") {\n        return await this.APIInstance.getAuthors(page, size, query);\n    }\n    async updateAuthor(authorId, data) {\n        return await this.APIInstance.updateAuthor(authorId, data);\n    }\n    async getFollowers(authorId) {\n        return await this.APIInstance.getFollowers(authorId);\n    }\n    async isPostLiked(postId, authorId) {\n        return await this.APIInstance.isPostLiked(postId, authorId);\n    }\n    async isCommentLiked(commentId, authorId) {\n        return await this.APIInstance.isCommentLiked(commentId, authorId);\n    }\n    async alertNewPost(authorId, post) {\n        return await this.APIInstance.alertNewPost(authorId, post);\n    }\n    async alertNewPostAuthors(authorId, post, authors) {\n        return await this.APIInstance.alertNewPostAuthors(authorId, post, authors);\n    }\n    async addFollower(authorId, foreignAuthorId) {\n        await this.APIInstance.addFollower(authorId, foreignAuthorId);\n    }\n    async checkFollowerStatus(authorId, foreignAuthorId) {\n        return await this.APIInstance.checkFollowerStatus(authorId, foreignAuthorId);\n    }\n    async removeFollower(authorId, foreignAuthorId) {\n        await this.APIInstance.removeFollower(authorId, foreignAuthorId);\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        try {\n            await this.APIInstance.sendFollowRequest(authorTo, authorFrom);\n        } catch (e) {\n            throw new Error(\"Error sending follow request\");\n        }\n    }\n    async getPost(authorId, postId) {\n        return await this.APIInstance.getPost(authorId, postId);\n    }\n    async getPosts(authorId) {\n        return await this.APIInstance.getPosts(authorId);\n    }\n    async createPost(authorId, post) {\n        return await this.APIInstance.createPost(authorId, post);\n    }\n    async updatePost(authorId, postId, post) {\n        return await this.APIInstance.updatePost(authorId, postId, post);\n    }\n    async deletePost(authorId, postId) {\n        await this.APIInstance.deletePost(authorId, postId);\n    }\n    async getComments(authorId, postId, page = 0, size = 25) {\n        return await this.APIInstance.getComments(authorId, postId, page, size);\n    }\n    async createComment(authorId, postId, comment) {\n        return await this.APIInstance.createComment(authorId, postId, comment);\n    }\n    async createLike(authorId, post, authorFrom) {\n        return await this.APIInstance.createLike(authorId, post, authorFrom);\n    }\n    async createCommentLike(authorId, comment, authorFrom) {\n        return await this.APIInstance.createCommentLike(authorId, comment, authorFrom);\n    }\n    async getLiked(authorId) {\n        return await this.APIInstance.getLiked(authorId);\n    }\n    async getInbox(authorId) {\n        return await this.APIInstance.getInbox(authorId);\n    }\n    async clearInbox(authorId) {\n        return await this.APIInstance.clearInbox(authorId);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NodeClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/node-client.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/node-manager.ts":
/*!***********************************!*\
  !*** ./src/nodes/node-manager.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(api)/./src/nodes/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([___WEBPACK_IMPORTED_MODULE_0__]);\n___WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst memo = (callback)=>{\n    const cache = new Map();\n    return (...args)=>{\n        const selector = JSON.stringify(args);\n        if (cache.has(selector)) return cache.get(selector);\n        const value = callback(...args);\n        cache.set(selector, value);\n        return value;\n    };\n};\nclass NodeManager {\n    constructor(nodes){\n        this.nodes = nodes;\n    }\n    addNode(key, api) {\n        this.nodes[key] = api;\n    }\n    removeNode(nodeId) {\n        delete this.nodes[nodeId];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    async checkAuthorExists(authorId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                // check cache first\n                if (await node.getAuthor(authorId)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    async getAuthor(authorId, nodeId = \"all\") {\n        if (nodeId === \"all\") {\n            for (const node of Object.values(this.nodes)){\n                // check cache first\n                const author = await node.getAuthor(authorId);\n                if (author) {\n                    if (author.id) author.url = author.id;\n                    return author;\n                }\n            }\n            return null;\n        } else {\n            return await this.nodes[nodeId].getAuthor(authorId);\n        }\n    }\n    async createAuthor(author) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                await node.createAuthor(author);\n            }\n        }\n        return;\n    }\n    async getAuthors(page = 0, size = 25, nodeId = \"all\", query = \"\") {\n        if (nodeId === \"all\") {\n            let authors = [];\n            for (const node of Object.values(this.nodes)){\n                const results = await node.getAuthors(page, size, query);\n                if (results.items) authors = authors.concat(results.items);\n            }\n            return {\n                type: \"authors\",\n                items: authors\n            };\n        } else {\n            return await this.nodes[nodeId].getAuthors(page, size, query);\n        }\n    }\n    async updateAuthor(authorId, data) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                await node.updateAuthor(authorId, data);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    // FIXME: Why not use api.getFollowers() instead? it gets all of an author's followers without having to loop like this.\n    async getFollowers(authorId, nodeId = \"all\") {\n        if (nodeId === \"all\") {\n            let authors = [];\n            let requests = [];\n            for (const node of Object.values(this.nodes)){\n                requests.push(node.getFollowers(authorId));\n            }\n            const results = await Promise.all(requests);\n            for (const result of results){\n                if (result.items) authors = authors.concat(result.items);\n            }\n            return {\n                type: \"authors\",\n                items: authors\n            };\n        } else {\n            return await this.nodes[nodeId].getFollowers(authorId);\n        }\n    }\n    async isPostLiked(postId, authorId) {\n        for (const node of Object.values(this.nodes)){\n            const result = await node.isPostLiked(postId, authorId);\n            if (result) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async isCommentLiked(commentId, authorId) {\n        for (const node of Object.values(this.nodes)){\n            const result = await node.isCommentLiked(commentId, authorId);\n            if (result) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async alertNewPost(authorId, post) {\n        let requests = [];\n        for (const node of Object.values(this.nodes)){\n            requests.push(node.alertNewPost(authorId, post));\n        }\n        await Promise.all(requests);\n    }\n    async addFollower(authorId, foreignAuthorId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.addFollower(authorId, foreignAuthorId);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async checkFollowerStatus(authorId, foreignAuthorId) {\n        // check cache first\n        let author = await this.getAuthor(authorId);\n        if (author?.id) {\n            let nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(author.id);\n            let node = this.nodes[nodeId];\n            if (node) {\n                return await node.checkFollowerStatus(authorId, foreignAuthorId);\n            }\n        }\n        return \"not_friends\";\n    }\n    async removeFollower(authorId, foreignAuthorId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.removeFollower(authorId, foreignAuthorId);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        let authorUrl = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(authorTo.id || \"\");\n        let node = this.nodes[authorUrl];\n        if (node) {\n            return await node.sendFollowRequest(authorTo, authorFrom);\n        }\n    }\n    async getPost(authorId, postId) {\n        // find author in cache\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].getPost(authorId, postId);\n        }\n        return null;\n    }\n    async getPosts(authorId, nodeId = \"all\") {\n        // check cache for author\n        let author = await this.getAuthor(authorId);\n        if (!author) {\n            return {\n                type: \"posts\",\n                items: []\n            };\n        }\n        let node = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(node || \"\");\n        if (node) {\n            return await this.nodes[nodeId].getPosts(authorId);\n        }\n        return await this.nodes[nodeId].getPosts(authorId);\n    }\n    async createPost(authorId, post) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.createPost(authorId, post);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async updatePost(authorId, postId, post) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.updatePost(authorId, postId, post);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async deletePost(authorId, postId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.deletePost(authorId, postId);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async getComments(authorId, postId, page = 0, size = 25) {\n        // check cache for author\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].getComments(authorId, postId, page, size);\n        }\n        let comments = [];\n        let post = \"\";\n        let id = \"\";\n        for (const node of Object.values(this.nodes)){\n            const results = await node.getComments(authorId, postId, page, size);\n            if (results.post) {\n                post = results.post;\n            }\n            if (results.id) {\n                id = results.id;\n            }\n            if (results.comments) {\n                comments = comments.concat(results.comments);\n            }\n        }\n        return {\n            type: \"comments\",\n            comments: comments,\n            page: page,\n            post: post,\n            size: size,\n            id: id\n        };\n    }\n    async createComment(authorId, postId, comment) {\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].createComment(authorId, postId, comment);\n        }\n        return null;\n    }\n    async createLike(authorId, post, authorFrom) {\n        // GET author from cache\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].createLike(authorId, post, authorFrom);\n        }\n    }\n    async createCommentLike(authorId, comment, authorFrom) {\n        // GET author from cache\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].createCommentLike(authorId, comment, authorFrom);\n        }\n    }\n    async getLiked(authorId, nodeId = \"all\") {\n        if (nodeId === \"all\") {\n            let likes = [];\n            for (const node of Object.values(this.nodes)){\n                const results = await node.getLiked(authorId);\n                if (results.items) likes = likes.concat(results.items);\n            }\n            return {\n                type: \"likes\",\n                items: likes\n            };\n        } else {\n            return await this.nodes[nodeId].getLiked(authorId);\n        }\n    }\n    async sendToInbox(authorId, inboxItem) {\n        let author = await this.getAuthor(authorId);\n        let nodeId = author?.id;\n        nodeId = (0,___WEBPACK_IMPORTED_MODULE_0__.getURL)(nodeId || \"\");\n        if (nodeId) {\n            return await this.nodes[nodeId].sendToInbox(authorId, inboxItem);\n        }\n    }\n    async getInbox(authorId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                let inbox = await node.getInbox(authorId);\n                // iterate through inbox items \n                let inboxItems = inbox.items;\n                let inboxItemsNew = [];\n                if (inboxItems) {\n                    let inboxPosts = inboxItems.map(async (item)=>{\n                        if (item.type === \"post\") {\n                            let id = item.id?.split(\"/\").pop() || \"\";\n                            let post = await this.getPost(authorId, id);\n                            if (post) {\n                                return post;\n                            }\n                        }\n                    });\n                    let allInboxPosts = await Promise.all(inboxPosts);\n                    // iterate through inbox items\n                    for(let i = 0; i < inboxItems.length; i++){\n                        if (inboxItems[i].type === \"post\") {\n                            inboxItemsNew.push(allInboxPosts[i]);\n                        } else {\n                            inboxItemsNew.push(inboxItems[i]);\n                        }\n                    }\n                    // remove undefined items\n                    inboxItemsNew = inboxItemsNew.filter((item)=>item !== undefined);\n                    inbox.items = inboxItemsNew;\n                    return inbox;\n                }\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n    async clearInbox(authorId) {\n        for (const node of Object.values(this.nodes)){\n            if (node.getNodeType() === \"local\") {\n                return await node.clearInbox(authorId);\n            }\n        }\n        throw new Error(\"No local node found\");\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NodeManager);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/node-manager.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/api.ts":
/*!**************************************!*\
  !*** ./src/nodes/schemas/t12/api.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api */ \"(api)/./src/nodes/api.ts\");\n/* harmony import */ var _gen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gen */ \"(api)/./src/nodes/schemas/t12/gen/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_0__, _gen__WEBPACK_IMPORTED_MODULE_1__]);\n([_api__WEBPACK_IMPORTED_MODULE_0__, _gen__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.BASE = \"https://cmput404-project-data.herokuapp.com\" || 0;\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.USERNAME = \"username1\";\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.PASSWORD = \"123\";\nclass API12 extends _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(apiUrl, axiosConfig){\n        super(apiUrl, axiosConfig, \"remote\");\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        let id = authorTo.id || \"a\";\n        try {\n            await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsInboxCreate(id, {\n                followRequest: {\n                    type: \"follow\",\n                    summary: `${authorFrom.displayName || \"Someone\"} wants to follow you`,\n                    author: {\n                        id: authorFrom.id || \"\",\n                        url: authorFrom.url || \"\",\n                        host: authorFrom.host || \"\",\n                        displayName: authorFrom.displayName || \"\",\n                        github: authorFrom.github || \"\",\n                        profileImage: authorFrom.profileImage || \"\"\n                    }\n                }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    postAdapter(post) {\n        delete post.author?.created_at;\n        return {\n            type: \"post\",\n            post: {\n                id: post.id || \"\",\n                title: post.title || \"\",\n                source: post.source || \"\",\n                origin: post.origin || \"\",\n                description: post.description || \"\",\n                contentType: post.contentType || \"\",\n                content: post.content || \"\",\n                visibility: post.visibility || \"PUBLIC\",\n                unlisted: post.unlisted || false,\n                author: post.author,\n                comments: post.comments || \"\",\n                published: post.published || \"\"\n            },\n            sender: post.author\n        };\n    }\n    async sendToInbox(authorId, activity) {\n        if (activity.type === \"post\") {\n            let post = activity;\n            let id = authorId || \"a\";\n            try {\n                await this.axiosInstance.post(`/service/authors/${authorId}/inbox/`, this.postAdapter(post));\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n    async getAuthors(page, size, query) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsList();\n            return result;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async getAuthor(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsRead(authorId);\n            return result.items;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getFollowers(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsFollowersList(authorId);\n            return result;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async getPosts(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsPostsList(authorId);\n            return result;\n        } catch (e) {\n            return {\n                type: \"posts\",\n                items: []\n            };\n        }\n    }\n    async getPost(authorId, postId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsPostsRead(authorId, postId);\n            return result;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getComments(authorId, postId, page, size) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.ServiceService.serviceAuthorsPostsCommentsList(authorId, postId);\n            result.comments = result.items;\n            return result;\n        } catch (e) {\n            return {\n                type: \"comments\",\n                comments: []\n            };\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API12);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/api.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/core/ApiError.ts":
/*!****************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/core/ApiError.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiError\": () => (/* binding */ ApiError)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ class ApiError extends Error {\n    constructor(request, response, message){\n        super(message);\n        this.name = \"ApiError\";\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL2NvcmUvQXBpRXJyb3IudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLEdBSVgsTUFBTUEsaUJBQWlCQztJQU8xQkMsWUFBWUMsT0FBMEIsRUFBRUMsUUFBbUIsRUFBRUMsT0FBZSxDQUFFO1FBQzFFLEtBQUssQ0FBQ0E7UUFFTixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHSCxTQUFTRyxHQUFHO1FBQ3ZCLElBQUksQ0FBQ0MsTUFBTSxHQUFHSixTQUFTSSxNQUFNO1FBQzdCLElBQUksQ0FBQ0MsVUFBVSxHQUFHTCxTQUFTSyxVQUFVO1FBQ3JDLElBQUksQ0FBQ0MsSUFBSSxHQUFHTixTQUFTTSxJQUFJO1FBQ3pCLElBQUksQ0FBQ1AsT0FBTyxHQUFHQTtJQUNuQjtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3QxMi9nZW4vY29yZS9BcGlFcnJvci50cz85NGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB0eXBlIHsgQXBpUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL0FwaVJlcXVlc3RPcHRpb25zJztcbmltcG9ydCB0eXBlIHsgQXBpUmVzdWx0IH0gZnJvbSAnLi9BcGlSZXN1bHQnO1xuXG5leHBvcnQgY2xhc3MgQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgcHVibGljIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBzdGF0dXM6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhdHVzVGV4dDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBib2R5OiBhbnk7XG4gICAgcHVibGljIHJlYWRvbmx5IHJlcXVlc3Q6IEFwaVJlcXVlc3RPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IocmVxdWVzdDogQXBpUmVxdWVzdE9wdGlvbnMsIHJlc3BvbnNlOiBBcGlSZXN1bHQsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnQXBpRXJyb3InO1xuICAgICAgICB0aGlzLnVybCA9IHJlc3BvbnNlLnVybDtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgIHRoaXMuYm9keSA9IHJlc3BvbnNlLmJvZHk7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkFwaUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInJlcXVlc3QiLCJyZXNwb25zZSIsIm1lc3NhZ2UiLCJuYW1lIiwidXJsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/core/ApiError.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/core/CancelablePromise.ts":
/*!*************************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/core/CancelablePromise.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CancelError\": () => (/* binding */ CancelError),\n/* harmony export */   \"CancelablePromise\": () => (/* binding */ CancelablePromise)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ class CancelError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"CancelError\";\n    }\n    get isCancelled() {\n        return true;\n    }\n}\nclass CancelablePromise {\n    constructor(executor){\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise((resolve, reject)=>{\n            this._resolve = resolve;\n            this._reject = reject;\n            const onResolve = (value)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n            const onReject = (reason)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n            const onCancel = (cancelHandler)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n            Object.defineProperty(onCancel, \"isResolved\", {\n                get: ()=>this._isResolved\n            });\n            Object.defineProperty(onCancel, \"isRejected\", {\n                get: ()=>this._isRejected\n            });\n            Object.defineProperty(onCancel, \"isCancelled\", {\n                get: ()=>this._isCancelled\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel() {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers){\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn(\"Cancellation threw an error\", error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError(\"Request aborted\"));\n    }\n    get isCancelled() {\n        return this._isCancelled;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/core/CancelablePromise.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts":
/*!***************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/core/OpenAPI.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OpenAPI\": () => (/* binding */ OpenAPI)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ const OpenAPI = {\n    BASE: \"https://cmput404-project-data.herokuapp.com\",\n    VERSION: \"1\",\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: \"include\",\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL2NvcmUvT3BlbkFQSS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FrQlgsTUFBTUEsVUFBeUI7SUFDbENDLE1BQU07SUFDTkMsU0FBUztJQUNUQyxrQkFBa0IsS0FBSztJQUN2QkMsYUFBYTtJQUNiQyxPQUFPQztJQUNQQyxVQUFVRDtJQUNWRSxVQUFVRjtJQUNWRyxTQUFTSDtJQUNUSSxhQUFhSjtBQUNqQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL2NvcmUvT3BlbkFQSS50cz8wNGI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB0eXBlIHsgQXBpUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL0FwaVJlcXVlc3RPcHRpb25zJztcblxudHlwZSBSZXNvbHZlcjxUPiA9IChvcHRpb25zOiBBcGlSZXF1ZXN0T3B0aW9ucykgPT4gUHJvbWlzZTxUPjtcbnR5cGUgSGVhZGVycyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbmV4cG9ydCB0eXBlIE9wZW5BUElDb25maWcgPSB7XG4gICAgQkFTRTogc3RyaW5nO1xuICAgIFZFUlNJT046IHN0cmluZztcbiAgICBXSVRIX0NSRURFTlRJQUxTOiBib29sZWFuO1xuICAgIENSRURFTlRJQUxTOiAnaW5jbHVkZScgfCAnb21pdCcgfCAnc2FtZS1vcmlnaW4nO1xuICAgIFRPS0VOPzogc3RyaW5nIHwgUmVzb2x2ZXI8c3RyaW5nPjtcbiAgICBVU0VSTkFNRT86IHN0cmluZyB8IFJlc29sdmVyPHN0cmluZz47XG4gICAgUEFTU1dPUkQ/OiBzdHJpbmcgfCBSZXNvbHZlcjxzdHJpbmc+O1xuICAgIEhFQURFUlM/OiBIZWFkZXJzIHwgUmVzb2x2ZXI8SGVhZGVycz47XG4gICAgRU5DT0RFX1BBVEg/OiAocGF0aDogc3RyaW5nKSA9PiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgT3BlbkFQSTogT3BlbkFQSUNvbmZpZyA9IHtcbiAgICBCQVNFOiAnaHR0cHM6Ly9jbXB1dDQwNC1wcm9qZWN0LWRhdGEuaGVyb2t1YXBwLmNvbScsXG4gICAgVkVSU0lPTjogJzEnLFxuICAgIFdJVEhfQ1JFREVOVElBTFM6IGZhbHNlLFxuICAgIENSRURFTlRJQUxTOiAnaW5jbHVkZScsXG4gICAgVE9LRU46IHVuZGVmaW5lZCxcbiAgICBVU0VSTkFNRTogdW5kZWZpbmVkLFxuICAgIFBBU1NXT1JEOiB1bmRlZmluZWQsXG4gICAgSEVBREVSUzogdW5kZWZpbmVkLFxuICAgIEVOQ09ERV9QQVRIOiB1bmRlZmluZWQsXG59O1xuIl0sIm5hbWVzIjpbIk9wZW5BUEkiLCJCQVNFIiwiVkVSU0lPTiIsIldJVEhfQ1JFREVOVElBTFMiLCJDUkVERU5USUFMUyIsIlRPS0VOIiwidW5kZWZpbmVkIiwiVVNFUk5BTUUiLCJQQVNTV09SRCIsIkhFQURFUlMiLCJFTkNPREVfUEFUSCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/core/request.ts":
/*!***************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/core/request.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"request\": () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! form-data */ \"form-data\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ApiError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApiError */ \"(api)/./src/nodes/schemas/t12/gen/core/ApiError.ts\");\n/* harmony import */ var _CancelablePromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CancelablePromise */ \"(api)/./src/nodes/schemas/t12/gen/core/CancelablePromise.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\n\n\nconst isDefined = (value)=>{\n    return value !== undefined && value !== null;\n};\nconst isString = (value)=>{\n    return typeof value === \"string\";\n};\nconst isStringWithValue = (value)=>{\n    return isString(value) && value !== \"\";\n};\nconst isBlob = (value)=>{\n    return typeof value === \"object\" && typeof value.type === \"string\" && typeof value.stream === \"function\" && typeof value.arrayBuffer === \"function\" && typeof value.constructor === \"function\" && typeof value.constructor.name === \"string\" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);\n};\nconst isFormData = (value)=>{\n    return value instanceof (form_data__WEBPACK_IMPORTED_MODULE_1___default());\n};\nconst isSuccess = (status)=>{\n    return status >= 200 && status < 300;\n};\nconst base64 = (str)=>{\n    try {\n        return btoa(str);\n    } catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString(\"base64\");\n    }\n};\nconst getQueryString = (params)=>{\n    const qs = [];\n    const append = (key, value)=>{\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n    const process = (key, value)=>{\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach((v)=>{\n                    process(key, v);\n                });\n            } else if (typeof value === \"object\") {\n                Object.entries(value).forEach(([k, v])=>{\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n    Object.entries(params).forEach(([key, value])=>{\n        process(key, value);\n    });\n    if (qs.length > 0) {\n        return `?${qs.join(\"&\")}`;\n    }\n    return \"\";\n};\nconst getUrl = (config, options)=>{\n    const encoder = config.ENCODE_PATH || encodeURI;\n    const path = options.url.replace(\"{api-version}\", config.VERSION).replace(/{(.*?)}/g, (substring, group)=>{\n        if (options.path?.hasOwnProperty(group)) {\n            return encoder(String(options.path[group]));\n        }\n        return substring;\n    });\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\nconst getFormData = (options)=>{\n    if (options.formData) {\n        const formData = new (form_data__WEBPACK_IMPORTED_MODULE_1___default())();\n        const process = (key, value)=>{\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n        Object.entries(options.formData).filter(([_, value])=>isDefined(value)).forEach(([key, value])=>{\n            if (Array.isArray(value)) {\n                value.forEach((v)=>process(key, v));\n            } else {\n                process(key, value);\n            }\n        });\n        return formData;\n    }\n    return undefined;\n};\nconst resolve = async (options, resolver)=>{\n    if (typeof resolver === \"function\") {\n        return resolver(options);\n    }\n    return resolver;\n};\nconst getHeaders = async (config, options, formData)=>{\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof formData?.getHeaders === \"function\" && formData?.getHeaders() || {};\n    const headers = Object.entries({\n        Accept: \"application/json\",\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders\n    }).filter(([_, value])=>isDefined(value)).reduce((headers, [key, value])=>({\n            ...headers,\n            [key]: String(value)\n        }), {});\n    if (isStringWithValue(token)) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers[\"Authorization\"] = `Basic ${credentials}`;\n    }\n    if (options.body) {\n        if (options.mediaType) {\n            headers[\"Content-Type\"] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n        } else if (isString(options.body)) {\n            headers[\"Content-Type\"] = \"text/plain\";\n        } else if (!isFormData(options.body)) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n    }\n    return headers;\n};\nconst getRequestBody = (options)=>{\n    if (options.body) {\n        return options.body;\n    }\n    return undefined;\n};\nconst sendRequest = async (config, options, url, body, formData, headers, onCancel)=>{\n    const source = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CancelToken.source();\n    const requestConfig = {\n        url,\n        headers,\n        data: body ?? formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token\n    };\n    onCancel(()=>source.cancel(\"The user aborted a request.\"));\n    try {\n        return await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].request(requestConfig);\n    } catch (error) {\n        const axiosError = error;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\nconst getResponseHeader = (response, responseHeader)=>{\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\nconst getResponseBody = (response)=>{\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return undefined;\n};\nconst catchErrorCodes = (options, result)=>{\n    const errors = {\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        500: \"Internal Server Error\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        ...options.errors\n    };\n    const error = errors[result.status];\n    if (error) {\n        throw new _ApiError__WEBPACK_IMPORTED_MODULE_2__.ApiError(options, result, error);\n    }\n    if (!result.ok) {\n        throw new _ApiError__WEBPACK_IMPORTED_MODULE_2__.ApiError(options, result, \"Generic Error\");\n    }\n};\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */ const request = (config, options)=>{\n    return new _CancelablePromise__WEBPACK_IMPORTED_MODULE_3__.CancelablePromise(async (resolve, reject, onCancel)=>{\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n                const result = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody\n                };\n                catchErrorCodes(options, result);\n                resolve(result.body);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/core/request.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/index.ts":
/*!********************************************!*\
  !*** ./src/nodes/schemas/t12/gen/index.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiError\": () => (/* reexport safe */ _core_ApiError__WEBPACK_IMPORTED_MODULE_0__.ApiError),\n/* harmony export */   \"CancelError\": () => (/* reexport safe */ _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__.CancelError),\n/* harmony export */   \"CancelablePromise\": () => (/* reexport safe */ _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__.CancelablePromise),\n/* harmony export */   \"OpenAPI\": () => (/* reexport safe */ _core_OpenAPI__WEBPACK_IMPORTED_MODULE_2__.OpenAPI),\n/* harmony export */   \"PostService\": () => (/* reexport safe */ _services_PostService__WEBPACK_IMPORTED_MODULE_4__.PostService),\n/* harmony export */   \"Service\": () => (/* reexport safe */ _services_Service__WEBPACK_IMPORTED_MODULE_3__.Service),\n/* harmony export */   \"ServiceService\": () => (/* reexport safe */ _services_ServiceService__WEBPACK_IMPORTED_MODULE_5__.ServiceService),\n/* harmony export */   \"SigninService\": () => (/* reexport safe */ _services_SigninService__WEBPACK_IMPORTED_MODULE_6__.SigninService),\n/* harmony export */   \"SignupService\": () => (/* reexport safe */ _services_SignupService__WEBPACK_IMPORTED_MODULE_7__.SignupService)\n/* harmony export */ });\n/* harmony import */ var _core_ApiError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/ApiError */ \"(api)/./src/nodes/schemas/t12/gen/core/ApiError.ts\");\n/* harmony import */ var _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/CancelablePromise */ \"(api)/./src/nodes/schemas/t12/gen/core/CancelablePromise.ts\");\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _services_Service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/Service */ \"(api)/./src/nodes/schemas/t12/gen/services/Service.ts\");\n/* harmony import */ var _services_PostService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/PostService */ \"(api)/./src/nodes/schemas/t12/gen/services/PostService.ts\");\n/* harmony import */ var _services_ServiceService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/ServiceService */ \"(api)/./src/nodes/schemas/t12/gen/services/ServiceService.ts\");\n/* harmony import */ var _services_SigninService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/SigninService */ \"(api)/./src/nodes/schemas/t12/gen/services/SigninService.ts\");\n/* harmony import */ var _services_SignupService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/SignupService */ \"(api)/./src/nodes/schemas/t12/gen/services/SignupService.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_services_Service__WEBPACK_IMPORTED_MODULE_3__, _services_PostService__WEBPACK_IMPORTED_MODULE_4__, _services_ServiceService__WEBPACK_IMPORTED_MODULE_5__, _services_SigninService__WEBPACK_IMPORTED_MODULE_6__, _services_SignupService__WEBPACK_IMPORTED_MODULE_7__]);\n([_services_Service__WEBPACK_IMPORTED_MODULE_3__, _services_PostService__WEBPACK_IMPORTED_MODULE_4__, _services_ServiceService__WEBPACK_IMPORTED_MODULE_5__, _services_SigninService__WEBPACK_IMPORTED_MODULE_6__, _services_SignupService__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\n\n\n\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL2luZGV4LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDeUI7QUFDK0I7QUFDakM7QUFHSTtBQUNRO0FBQ007QUFDRjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL2luZGV4LnRzPzA3NzciXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZXhwb3J0IHsgQXBpRXJyb3IgfSBmcm9tICcuL2NvcmUvQXBpRXJyb3InO1xuZXhwb3J0IHsgQ2FuY2VsYWJsZVByb21pc2UsIENhbmNlbEVycm9yIH0gZnJvbSAnLi9jb3JlL0NhbmNlbGFibGVQcm9taXNlJztcbmV4cG9ydCB7IE9wZW5BUEkgfSBmcm9tICcuL2NvcmUvT3BlbkFQSSc7XG5leHBvcnQgdHlwZSB7IE9wZW5BUElDb25maWcgfSBmcm9tICcuL2NvcmUvT3BlbkFQSSc7XG5cbmV4cG9ydCB7IFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL1NlcnZpY2UnO1xuZXhwb3J0IHsgUG9zdFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL1Bvc3RTZXJ2aWNlJztcbmV4cG9ydCB7IFNlcnZpY2VTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9TZXJ2aWNlU2VydmljZSc7XG5leHBvcnQgeyBTaWduaW5TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9TaWduaW5TZXJ2aWNlJztcbmV4cG9ydCB7IFNpZ251cFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL1NpZ251cFNlcnZpY2UnO1xuIl0sIm5hbWVzIjpbIkFwaUVycm9yIiwiQ2FuY2VsYWJsZVByb21pc2UiLCJDYW5jZWxFcnJvciIsIk9wZW5BUEkiLCJTZXJ2aWNlIiwiUG9zdFNlcnZpY2UiLCJTZXJ2aWNlU2VydmljZSIsIlNpZ25pblNlcnZpY2UiLCJTaWdudXBTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/index.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/services/PostService.ts":
/*!***********************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/services/PostService.ts ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PostService\": () => (/* binding */ PostService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t12/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass PostService {\n    /**\n     * Don't use this get, this is just for testing.\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsLikeRead(postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/post/authors/{userId}/like/{postId}\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Create a like to specified post, no data required.\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsLikeCreate(postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/post/authors/{userId}/like/{postId}\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Don't use this get, this is just for testing.\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCreateList(userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/post/authors/{userId}/posts/create\",\n            path: {\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Create a new post.\n     * @param userId\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCreateCreate(userId, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/post/authors/{userId}/posts/create\",\n            path: {\n                \"userId\": userId\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Don't use this get, this is just for testing.\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCommentList(postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/post/authors/{userId}/posts/{postId}/comment\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Create a new comment on the specified post.\n     * @param postId\n     * @param userId\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCommentCreate(postId, userId, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/post/authors/{userId}/posts/{postId}/comment\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Don't use this get, this is just for testing.\n     * @param commentId\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCommentsLikesList(commentId, postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/post/authors/{userId}/posts/{postId}/comments/{commentId}/likes\",\n            path: {\n                \"commentId\": commentId,\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Create a like to specified comment under specified post, no data required.\n     * @param commentId\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsPostsCommentsLikesCreate(commentId, postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/post/authors/{userId}/posts/{postId}/comments/{commentId}/likes\",\n            path: {\n                \"commentId\": commentId,\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Don't use this get, this is just for testing.\n     * @param postId\n     * @param userId\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsShareRead(postId, userId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/post/authors/{userId}/share/{postId}\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            }\n        });\n    }\n    /**\n     * Share post from current author to another author.\n     * @param postId\n     * @param userId\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static postAuthorsShareCreate(postId, userId, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/post/authors/{userId}/share/{postId}\",\n            path: {\n                \"postId\": postId,\n                \"userId\": userId\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/services/PostService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/services/Service.ts":
/*!*******************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/services/Service.ts ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Service\": () => (/* binding */ Service)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t12/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass Service {\n    /**\n     * @returns any\n     * @throws ApiError\n     */ static list() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/\"\n        });\n    }\n    /**\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static create(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL3NlcnZpY2VzL1NlcnZpY2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FFd0I7QUFDYTtBQUVoRCxNQUFNRztJQUVUOzs7S0FHQyxHQUNELE9BQWNDLE9BQStCO1FBQ3pDLE9BQU9GLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0QkssUUFBUTtZQUNSQyxLQUFLO1FBQ1Q7SUFDSjtJQUVBOzs7O0tBSUMsR0FDRCxPQUFjQyxPQUNWQyxXQVNDLEVBVUY7UUFDQyxPQUFPTixzREFBU0EsQ0FBQ0Ysa0RBQU9BLEVBQUU7WUFDdEJLLFFBQVE7WUFDUkMsS0FBSztZQUNMRyxNQUFNRDtZQUNORSxXQUFXO1FBQ2Y7SUFDSjtBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3QxMi9nZW4vc2VydmljZXMvU2VydmljZS50cz8xY2NkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB0eXBlIHsgQ2FuY2VsYWJsZVByb21pc2UgfSBmcm9tICcuLi9jb3JlL0NhbmNlbGFibGVQcm9taXNlJztcbmltcG9ydCB7IE9wZW5BUEkgfSBmcm9tICcuLi9jb3JlL09wZW5BUEknO1xuaW1wb3J0IHsgcmVxdWVzdCBhcyBfX3JlcXVlc3QgfSBmcm9tICcuLi9jb3JlL3JlcXVlc3QnO1xuXG5leHBvcnQgY2xhc3MgU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBhbnlcbiAgICAgKiBAdGhyb3dzIEFwaUVycm9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsaXN0KCk6IENhbmNlbGFibGVQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHJlcXVlc3RCb2R5XG4gICAgICogQHJldHVybnMgYW55XG4gICAgICogQHRocm93cyBBcGlFcnJvclxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB1c2VybmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBwYXNzd29yZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgICAgICB9LFxuICAgICk6IENhbmNlbGFibGVQcm9taXNlPHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZXJuYW1lXG4gICAgICAgICAqL1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogcGFzc3dvcmRcbiAgICAgICAgICovXG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgfT4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIG1lZGlhVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJPcGVuQVBJIiwicmVxdWVzdCIsIl9fcmVxdWVzdCIsIlNlcnZpY2UiLCJsaXN0IiwibWV0aG9kIiwidXJsIiwiY3JlYXRlIiwicmVxdWVzdEJvZHkiLCJib2R5IiwibWVkaWFUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/services/Service.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/services/ServiceService.ts":
/*!**************************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/services/ServiceService.ts ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ServiceService\": () => (/* binding */ ServiceService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t12/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass ServiceService {\n    /**\n     * Get all authors' informations.\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsList() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/\"\n        });\n    }\n    /**\n     * Get informations for specific author.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsRead(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Modify author's information.\n     * @param id\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsCreate(id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/service/authors/{id}/\",\n            path: {\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Get all comments liked by specific author.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsCommentsLikedList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/comments/liked\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get all the likes for a specific comment.\n     * @param commentId\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsCommentsLikesList(commentId, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/comments/{commentId}/likes\",\n            path: {\n                \"commentId\": commentId,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Don't use this GET, use getFollowers instead.\n     * @param foreignPk\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowRequestsRead(foreignPk, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/followRequests/{foreignPk}\",\n            path: {\n                \"foreignPk\": foreignPk,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Create a follow request current author.\n     * @param foreignPk\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowRequestsCreate(foreignPk, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/service/authors/{id}/followRequests/{foreignPk}\",\n            path: {\n                \"foreignPk\": foreignPk,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get all the followers taht follow current user.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowersList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/followers/\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get information of a specific follower.\n     * @param foreignPk\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowersRead(foreignPk, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/followers/{foreignPk}\",\n            path: {\n                \"foreignPk\": foreignPk,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Add a new following relation, make sure the user send out follow request put after /followers/author_uuid.\n     * @param foreignPk\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowersUpdate(foreignPk, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"PUT\",\n            url: \"/service/authors/{id}/followers/{foreignPk}\",\n            path: {\n                \"foreignPk\": foreignPk,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Delete a following relation.\n     * @param foreignPk\n     * @param id\n     * @returns void\n     * @throws ApiError\n     */ static serviceAuthorsFollowersDelete(foreignPk, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/service/authors/{id}/followers/{foreignPk}\",\n            path: {\n                \"foreignPk\": foreignPk,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get all the users followed by current user.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsFollowingList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/following/\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get all the posts, comments, follow requests and likes in specific author's inbox.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsInboxList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/inbox\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * ###attention: only followRequest is valid now.### Create posts or comments or follow requests or likes to specific author's inbox.\n     * @param id\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsInboxCreate(id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/service/authors/{id}/inbox\",\n            path: {\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Clear inbox for specific author.\n     * @param id\n     * @returns void\n     * @throws ApiError\n     */ static serviceAuthorsInboxDelete(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/service/authors/{id}/inbox\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get all the posts liked by specific author.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsLikedList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/liked\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get posts create by specific author.\n     * @param id\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsList(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Create a new post, don't use this one, was used for test.\n     * @param id\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsCreate(id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/service/authors/{id}/posts/\",\n            path: {\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Get a specific post.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsRead(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/{postsId}/\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Update a specific post, non required.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsUpdate(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"PUT\",\n            url: \"/service/authors/{id}/posts/{postsId}/\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Delete a specific post.\n     * @param id\n     * @param postsId\n     * @returns void\n     * @throws ApiError\n     */ static serviceAuthorsPostsDelete(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/service/authors/{id}/posts/{postsId}/\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Get all the comments of specific post.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsCommentsList(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/{postsId}/comments\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Post new comments. Don't use this one, just for test.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsCommentsCreate(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/service/authors/{id}/posts/{postsId}/comments\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Get a specific comment.\n     * @param commentId\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsCommentsRead(commentId, id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/{postsId}/comments/{commentId}\",\n            path: {\n                \"commentId\": commentId,\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Get the image of a post.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsImageList(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/{postsId}/image\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Get all the likes for a specific post.\n     * @param id\n     * @param postsId\n     * @returns any\n     * @throws ApiError\n     */ static serviceAuthorsPostsLikesList(id, postsId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/authors/{id}/posts/{postsId}/likes\",\n            path: {\n                \"id\": id,\n                \"postsId\": postsId\n            }\n        });\n    }\n    /**\n     * Get all public posts.\n     * @returns any\n     * @throws ApiError\n     */ static servicePostsList() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/service/posts/\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/services/ServiceService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/services/SigninService.ts":
/*!*************************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/services/SigninService.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SigninService\": () => (/* binding */ SigninService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t12/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass SigninService {\n    /**\n     * @returns any\n     * @throws ApiError\n     */ static signinList() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/signin/\"\n        });\n    }\n    /**\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static signinCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/signin/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL3NlcnZpY2VzL1NpZ25pblNlcnZpY2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FFd0I7QUFDYTtBQUVoRCxNQUFNRztJQUVUOzs7S0FHQyxHQUNELE9BQWNDLGFBQXFDO1FBQy9DLE9BQU9GLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0QkssUUFBUTtZQUNSQyxLQUFLO1FBQ1Q7SUFDSjtJQUVBOzs7O0tBSUMsR0FDRCxPQUFjQyxhQUNWQyxXQVNDLEVBVUY7UUFDQyxPQUFPTixzREFBU0EsQ0FBQ0Ysa0RBQU9BLEVBQUU7WUFDdEJLLFFBQVE7WUFDUkMsS0FBSztZQUNMRyxNQUFNRDtZQUNORSxXQUFXO1FBQ2Y7SUFDSjtBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3QxMi9nZW4vc2VydmljZXMvU2lnbmluU2VydmljZS50cz9iYjJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB0eXBlIHsgQ2FuY2VsYWJsZVByb21pc2UgfSBmcm9tICcuLi9jb3JlL0NhbmNlbGFibGVQcm9taXNlJztcbmltcG9ydCB7IE9wZW5BUEkgfSBmcm9tICcuLi9jb3JlL09wZW5BUEknO1xuaW1wb3J0IHsgcmVxdWVzdCBhcyBfX3JlcXVlc3QgfSBmcm9tICcuLi9jb3JlL3JlcXVlc3QnO1xuXG5leHBvcnQgY2xhc3MgU2lnbmluU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBhbnlcbiAgICAgKiBAdGhyb3dzIEFwaUVycm9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzaWduaW5MaXN0KCk6IENhbmNlbGFibGVQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvc2lnbmluLycsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0Qm9keVxuICAgICAqIEByZXR1cm5zIGFueVxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHNpZ25pbkNyZWF0ZShcbiAgICAgICAgcmVxdWVzdEJvZHk6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogdXNlcm5hbWVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcGFzc3dvcmRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICAgICAgfSxcbiAgICApOiBDYW5jZWxhYmxlUHJvbWlzZTx7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VybmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBhc3N3b3JkXG4gICAgICAgICAqL1xuICAgICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIH0+IHtcbiAgICAgICAgcmV0dXJuIF9fcmVxdWVzdChPcGVuQVBJLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9zaWduaW4vJyxcbiAgICAgICAgICAgIGJvZHk6IHJlcXVlc3RCb2R5LFxuICAgICAgICAgICAgbWVkaWFUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbIk9wZW5BUEkiLCJyZXF1ZXN0IiwiX19yZXF1ZXN0IiwiU2lnbmluU2VydmljZSIsInNpZ25pbkxpc3QiLCJtZXRob2QiLCJ1cmwiLCJzaWduaW5DcmVhdGUiLCJyZXF1ZXN0Qm9keSIsImJvZHkiLCJtZWRpYVR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/services/SigninService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t12/gen/services/SignupService.ts":
/*!*************************************************************!*\
  !*** ./src/nodes/schemas/t12/gen/services/SignupService.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignupService\": () => (/* binding */ SignupService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t12/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t12/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass SignupService {\n    /**\n     * @returns any\n     * @throws ApiError\n     */ static signupList() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/signup/\"\n        });\n    }\n    /**\n     * @param requestBody\n     * @returns any\n     * @throws ApiError\n     */ static signupCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/signup/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTIvZ2VuL3NlcnZpY2VzL1NpZ251cFNlcnZpY2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FFd0I7QUFDYTtBQUVoRCxNQUFNRztJQUVUOzs7S0FHQyxHQUNELE9BQWNDLGFBQXFDO1FBQy9DLE9BQU9GLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0QkssUUFBUTtZQUNSQyxLQUFLO1FBQ1Q7SUFDSjtJQUVBOzs7O0tBSUMsR0FDRCxPQUFjQyxhQUNWQyxXQXFCQyxFQXNCRjtRQUNDLE9BQU9OLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0QkssUUFBUTtZQUNSQyxLQUFLO1lBQ0xHLE1BQU1EO1lBQ05FLFdBQVc7UUFDZjtJQUNKO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL3NjaGVtYXMvdDEyL2dlbi9zZXJ2aWNlcy9TaWdudXBTZXJ2aWNlLnRzP2VjNDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUvQ2FuY2VsYWJsZVByb21pc2UnO1xuaW1wb3J0IHsgT3BlbkFQSSB9IGZyb20gJy4uL2NvcmUvT3BlbkFQSSc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIF9fcmVxdWVzdCB9IGZyb20gJy4uL2NvcmUvcmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBTaWdudXBTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGFueVxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHNpZ251cExpc3QoKTogQ2FuY2VsYWJsZVByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBfX3JlcXVlc3QoT3BlbkFQSSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy9zaWdudXAvJyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHJlcXVlc3RCb2R5XG4gICAgICogQHJldHVybnMgYW55XG4gICAgICogQHRocm93cyBBcGlFcnJvclxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc2lnbnVwQ3JlYXRlKFxuICAgICAgICByZXF1ZXN0Qm9keToge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB1c2VybmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBwYXNzd29yZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkaXNwbGF5TmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBnaXRodWJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2l0aHViPzogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBwcm9maWxlSW1hZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvZmlsZUltYWdlPzogYW55O1xuICAgICAgICB9LFxuICAgICk6IENhbmNlbGFibGVQcm9taXNlPHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZXJuYW1lXG4gICAgICAgICAqL1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogcGFzc3dvcmRcbiAgICAgICAgICovXG4gICAgICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkaXNwbGF5TmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdpdGh1YlxuICAgICAgICAgKi9cbiAgICAgICAgZ2l0aHViPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogcHJvZmlsZUltYWdlXG4gICAgICAgICAqL1xuICAgICAgICBwcm9maWxlSW1hZ2U/OiBhbnk7XG4gICAgfT4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiAnL3NpZ251cC8nLFxuICAgICAgICAgICAgYm9keTogcmVxdWVzdEJvZHksXG4gICAgICAgICAgICBtZWRpYVR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iXSwibmFtZXMiOlsiT3BlbkFQSSIsInJlcXVlc3QiLCJfX3JlcXVlc3QiLCJTaWdudXBTZXJ2aWNlIiwic2lnbnVwTGlzdCIsIm1ldGhvZCIsInVybCIsInNpZ251cENyZWF0ZSIsInJlcXVlc3RCb2R5IiwiYm9keSIsIm1lZGlhVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t12/gen/services/SignupService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t17/api.ts":
/*!**************************************!*\
  !*** ./src/nodes/schemas/t17/api.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api */ \"(api)/./src/nodes/api.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_0__]);\n_api__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass API17 extends _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    authorId = (authorId)=>{\n        return `${this.apiURL}/authors/${authorId}`;\n    };\n    postId = (authorId, postId)=>{\n        return `${this.authorId(authorId)}/posts/${postId}`;\n    };\n    constructor(apiUrl, axiosConfig){\n        super(apiUrl, axiosConfig, \"remote\");\n    }\n    async getAuthor(authorId) {\n        authorId = this.authorId(authorId);\n        return super.getAuthor(authorId + \"/\");\n    }\n    async getPosts(authorId) {\n        authorId = this.authorId(authorId);\n        return super.getPosts(authorId);\n    }\n    async getPost(authorId, postId) {\n        postId = this.postId(authorId, postId); // Order matters, don't change the order of these two lines\n        authorId = this.authorId(authorId);\n        return super.getPost(authorId, postId + \"/\");\n    }\n    async getFollowers(authorId) {\n        authorId = this.authorId(authorId);\n        try {\n            const results = await this.axiosInstance.get(`/authors/${authorId}/followers/`);\n            if (results.data.items === undefined) {\n                throw new Error(\"items is undefined\");\n            }\n            return results.data;\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async checkFollowerStatus(authorId, foreignAuthorId) {\n        let t16APIHost = \"https://sd16-api.herokuapp.com/service\" || 0;\n        authorId = `${t16APIHost}/authors/${authorId}`;\n        foreignAuthorId = this.authorId(foreignAuthorId);\n        return super.checkFollowerStatus(authorId, foreignAuthorId + \"/\");\n    }\n    async sendFollowRequest(authorTo, authorFrom) {\n        if (authorTo.id) {\n            if (authorFrom.created_at) {\n                delete authorFrom.created_at;\n            }\n            let authorId = authorTo.id;\n            await this.sendToInbox(authorId || \"\", {\n                type: \"follow\",\n                summary: `${authorFrom?.displayName || \"Someone\"} wants to follow you`,\n                actor: authorFrom,\n                object: authorTo\n            });\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API17);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90MTcvYXBpLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBSy9CLE1BQU1DLGNBQWNELDRDQUFPQTtJQUNmRSxXQUFXLENBQUNBLFdBQW9CO1FBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUMsU0FBUyxFQUFFRCxTQUFTLENBQUM7SUFBQSxFQUFFO0lBQzlFRSxTQUFTLENBQUNGLFVBQWlCRSxTQUFrQjtRQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQ0YsUUFBUSxDQUFDQSxVQUFVLE9BQU8sRUFBRUUsT0FBTyxDQUFDO0lBQUEsRUFBRTtJQUUzR0MsWUFBWUMsTUFBYyxFQUFFQyxXQUErQixDQUFFO1FBQ3pELEtBQUssQ0FBQ0QsUUFBUUMsYUFBYTtJQUMvQjtJQUVBLE1BQXNCQyxVQUFVTixRQUFnQixFQUEwQjtRQUN0RUEsV0FBVyxJQUFJLENBQUNBLFFBQVEsQ0FBQ0E7UUFFekIsT0FBTyxLQUFLLENBQUNNLFNBQVMsQ0FBQ04sV0FBVztJQUN0QztJQUVBLE1BQXNCTyxTQUFTUCxRQUFnQixFQUEyQjtRQUN0RUEsV0FBVyxJQUFJLENBQUNBLFFBQVEsQ0FBQ0E7UUFFekIsT0FBTyxLQUFLLENBQUNPLFFBQVEsQ0FBQ1A7SUFDMUI7SUFFQSxNQUFzQlEsUUFBUVIsUUFBZ0IsRUFBRUUsTUFBYyxFQUF3QjtRQUNsRkEsU0FBUyxJQUFJLENBQUNBLE1BQU0sQ0FBQ0YsVUFBVUUsU0FBYSwyREFBMkQ7UUFDdkdGLFdBQVcsSUFBSSxDQUFDQSxRQUFRLENBQUNBO1FBQ3pCLE9BQU8sS0FBSyxDQUFDUSxPQUFPLENBQUNSLFVBQVVFLFNBQVM7SUFDNUM7SUFFQSxNQUFzQk8sYUFBYVQsUUFBZ0IsRUFBNkI7UUFDNUVBLFdBQVcsSUFBSSxDQUFDQSxRQUFRLENBQUNBO1FBRXpCLElBQUk7WUFDQSxNQUFNVSxVQUFVLE1BQU0sSUFBSSxDQUFDQyxhQUFhLENBQUNDLEdBQUcsQ0FBbUIsQ0FBQyxTQUFTLEVBQUVaLFNBQVMsV0FBVyxDQUFDO1lBQ2hHLElBQUlVLFFBQVFHLElBQUksQ0FBQ0MsS0FBSyxLQUFLQyxXQUFXO2dCQUNsQyxNQUFNLElBQUlDLE1BQU0sc0JBQXNCO1lBQzFDLENBQUM7WUFDRCxPQUFPTixRQUFRRyxJQUFJO1FBQ3ZCLEVBQ0EsT0FBT0ksR0FBRztZQUNOLE9BQU87Z0JBQ0hDLE1BQU07Z0JBQ05KLE9BQU8sRUFBRTtZQUNiO1FBQ0o7SUFDSjtJQUVBLE1BQXNCSyxvQkFBb0JuQixRQUFnQixFQUFFb0IsZUFBdUIsRUFBbUI7UUFDbEcsSUFBSUMsYUFBYUMsd0NBQStCLElBQUk7UUFDcER0QixXQUFXLENBQUMsRUFBRXFCLFdBQVcsU0FBUyxFQUFFckIsU0FBUyxDQUFDO1FBQzlDb0Isa0JBQWtCLElBQUksQ0FBQ3BCLFFBQVEsQ0FBQ29CO1FBQ2hDLE9BQU8sS0FBSyxDQUFDRCxtQkFBbUIsQ0FBQ25CLFVBQVVvQixrQkFBa0I7SUFDakU7SUFFQSxNQUFzQkssa0JBQWtCQyxRQUFnQixFQUFFQyxVQUFrQixFQUFpQjtRQUVyRixJQUFJRCxTQUFTRSxFQUFFLEVBQUU7WUFDYixJQUFJRCxXQUFXRSxVQUFVLEVBQUU7Z0JBQ3ZCLE9BQU9GLFdBQVdFLFVBQVU7WUFDaEMsQ0FBQztZQUVELElBQUk3QixXQUFXMEIsU0FBU0UsRUFBRTtZQUFpQixNQUFNLElBQUksQ0FBQ0UsV0FBVyxDQUFDOUIsWUFBWSxJQUFJO2dCQUMxRWtCLE1BQU07Z0JBQ05hLFNBQVMsQ0FBQyxFQUFFSixZQUFZSyxlQUFlLFVBQVUsb0JBQW9CLENBQUM7Z0JBQ3RFQyxPQUFPTjtnQkFDUE8sUUFBUVI7WUFDaEI7UUFDSixDQUFDO0lBR1Q7QUFFSjtBQUVBLGlFQUFlM0IsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL3NjaGVtYXMvdDE3L2FwaS50cz8yODgwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBUElCYXNlIGZyb20gJy4uLy4uL2FwaSdcbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcbi8vIGltcG9ydCB7IEF1dGhvciwgQ29tbWVudExpc3RJdGVtLCBMaXN0SXRlbSwgUG9zdCwgQ29tbWVudCB9IGZyb20gJ0AvaW5kZXgnO1xuaW1wb3J0IHsgQXV0aG9yLCBDb21tZW50TGlzdEl0ZW0sIExpc3RJdGVtLCBQb3N0LCBDb21tZW50IH0gZnJvbSAnLi4vLi4vLi4nO1xuXG5jbGFzcyBBUEkxNyBleHRlbmRzIEFQSUJhc2Uge1xuICAgIHByaXZhdGUgYXV0aG9ySWQgPSAoYXV0aG9ySWQ6c3RyaW5nKSA9PiB7cmV0dXJuIGAke3RoaXMuYXBpVVJMfS9hdXRob3JzLyR7YXV0aG9ySWR9YH07XG4gICAgcHJpdmF0ZSBwb3N0SWQgPSAoYXV0aG9ySWQ6c3RyaW5nLCBwb3N0SWQ6c3RyaW5nKSA9PiB7cmV0dXJuIGAke3RoaXMuYXV0aG9ySWQoYXV0aG9ySWQpfS9wb3N0cy8ke3Bvc3RJZH1gfTtcblxuICAgIGNvbnN0cnVjdG9yKGFwaVVybDogc3RyaW5nLCBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGFwaVVybCwgYXhpb3NDb25maWcsICdyZW1vdGUnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3ZlcnJpZGUgYXN5bmMgZ2V0QXV0aG9yKGF1dGhvcklkOiBzdHJpbmcpOiBQcm9taXNlPEF1dGhvciB8IG51bGw+IHtcbiAgICAgICAgYXV0aG9ySWQgPSB0aGlzLmF1dGhvcklkKGF1dGhvcklkKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRBdXRob3IoYXV0aG9ySWQgKyAnLycpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZSBhc3luYyBnZXRQb3N0cyhhdXRob3JJZDogc3RyaW5nKTogUHJvbWlzZTxMaXN0SXRlbTxQb3N0Pj4ge1xuICAgICAgICBhdXRob3JJZCA9IHRoaXMuYXV0aG9ySWQoYXV0aG9ySWQpO1xuICAgICAgIFxuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0UG9zdHMoYXV0aG9ySWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZSBhc3luYyBnZXRQb3N0KGF1dGhvcklkOiBzdHJpbmcsIHBvc3RJZDogc3RyaW5nKTogUHJvbWlzZTxQb3N0IHwgbnVsbD4ge1xuICAgICAgICBwb3N0SWQgPSB0aGlzLnBvc3RJZChhdXRob3JJZCwgcG9zdElkKTsgICAgIC8vIE9yZGVyIG1hdHRlcnMsIGRvbid0IGNoYW5nZSB0aGUgb3JkZXIgb2YgdGhlc2UgdHdvIGxpbmVzXG4gICAgICAgIGF1dGhvcklkID0gdGhpcy5hdXRob3JJZChhdXRob3JJZCk7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRQb3N0KGF1dGhvcklkLCBwb3N0SWQgKyAnLycpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZSBhc3luYyBnZXRGb2xsb3dlcnMoYXV0aG9ySWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdEl0ZW08QXV0aG9yPj4ge1xuICAgICAgICBhdXRob3JJZCA9IHRoaXMuYXV0aG9ySWQoYXV0aG9ySWQpO1xuICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmF4aW9zSW5zdGFuY2UuZ2V0PExpc3RJdGVtPEF1dGhvcj4+KGAvYXV0aG9ycy8ke2F1dGhvcklkfS9mb2xsb3dlcnMvYCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5kYXRhLml0ZW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpdGVtcyBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cy5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXV0aG9yc1wiLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG92ZXJyaWRlIGFzeW5jIGNoZWNrRm9sbG93ZXJTdGF0dXMoYXV0aG9ySWQ6IHN0cmluZywgZm9yZWlnbkF1dGhvcklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBsZXQgdDE2QVBJSG9zdCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zZXJ2aWNlJztcbiAgICAgICAgYXV0aG9ySWQgPSBgJHt0MTZBUElIb3N0fS9hdXRob3JzLyR7YXV0aG9ySWR9YDtcbiAgICAgICAgZm9yZWlnbkF1dGhvcklkID0gdGhpcy5hdXRob3JJZChmb3JlaWduQXV0aG9ySWQpO1xuICAgICAgICByZXR1cm4gc3VwZXIuY2hlY2tGb2xsb3dlclN0YXR1cyhhdXRob3JJZCwgZm9yZWlnbkF1dGhvcklkICsgJy8nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3ZlcnJpZGUgYXN5bmMgc2VuZEZvbGxvd1JlcXVlc3QoYXV0aG9yVG86IEF1dGhvciwgYXV0aG9yRnJvbTogQXV0aG9yKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKGF1dGhvclRvLmlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF1dGhvckZyb20uY3JlYXRlZF9hdCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXV0aG9yRnJvbS5jcmVhdGVkX2F0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBhdXRob3JJZCA9IGF1dGhvclRvLmlkOyAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNlbmRUb0luYm94KGF1dGhvcklkIHx8ICcnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZm9sbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnk6IGAke2F1dGhvckZyb20/LmRpc3BsYXlOYW1lIHx8ICdTb21lb25lJ30gd2FudHMgdG8gZm9sbG93IHlvdWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogYXV0aG9yRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogYXV0aG9yVG9cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgXG4gICAgICAgXG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFQSTE3OyJdLCJuYW1lcyI6WyJBUElCYXNlIiwiQVBJMTciLCJhdXRob3JJZCIsImFwaVVSTCIsInBvc3RJZCIsImNvbnN0cnVjdG9yIiwiYXBpVXJsIiwiYXhpb3NDb25maWciLCJnZXRBdXRob3IiLCJnZXRQb3N0cyIsImdldFBvc3QiLCJnZXRGb2xsb3dlcnMiLCJyZXN1bHRzIiwiYXhpb3NJbnN0YW5jZSIsImdldCIsImRhdGEiLCJpdGVtcyIsInVuZGVmaW5lZCIsIkVycm9yIiwiZSIsInR5cGUiLCJjaGVja0ZvbGxvd2VyU3RhdHVzIiwiZm9yZWlnbkF1dGhvcklkIiwidDE2QVBJSG9zdCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwic2VuZEZvbGxvd1JlcXVlc3QiLCJhdXRob3JUbyIsImF1dGhvckZyb20iLCJpZCIsImNyZWF0ZWRfYXQiLCJzZW5kVG9JbmJveCIsInN1bW1hcnkiLCJkaXNwbGF5TmFtZSIsImFjdG9yIiwib2JqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t17/api.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/api.ts":
/*!*************************************!*\
  !*** ./src/nodes/schemas/t7/api.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api */ \"(api)/./src/nodes/api.ts\");\n/* harmony import */ var _gen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gen */ \"(api)/./src/nodes/schemas/t7/gen/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_0__, _gen__WEBPACK_IMPORTED_MODULE_1__]);\n([_api__WEBPACK_IMPORTED_MODULE_0__, _gen__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.BASE = \"https://sd7-api.herokuapp.com\" || 0;\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.USERNAME = \"node01\";\n_gen__WEBPACK_IMPORTED_MODULE_1__.OpenAPI.PASSWORD = \"P*ssw0rd!\";\nclass API7 extends _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(apiUrl, axiosConfig){\n        super(apiUrl, axiosConfig, \"remote\");\n    }\n    async sendToInbox(authorId, activity) {\n        let author;\n        let summary = \"\";\n        let object = \"\";\n        if (activity.type === \"follow\") {\n            author = activity.actor;\n            summary = `${author?.displayName || \"Someone\"} wants to follow you`;\n            object = activity.object?.id || \"\";\n        } else if (activity.type === \"like\") {\n            author = activity.author;\n            summary = activity.summary || `${author?.displayName || \"Someone\"} liked your post`;\n            object = activity.object || \"\";\n        } else if (activity.type === \"comment\") {\n            author = activity.author;\n            summary = `${author?.displayName || \"Someone\"} commented on your post`;\n            object = activity.id || \"\";\n        } else if (activity.type === \"post\") {\n            author = activity.author;\n            summary = `${author?.displayName || \"Someone\"} posted something new`;\n            object = activity.id || \"\";\n        }\n        let type = activity.type;\n        try {\n            await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsInboxCreate(authorId, {\n                type: type,\n                summary: summary,\n                object: object,\n                //@ts-ignore\n                author: author\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    async getAuthors(page = 1, size = 10, query) {\n        let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsList(1, size);\n        return {\n            type: \"authors\",\n            items: result.items\n        };\n    }\n    async getAuthor(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsRetrieve(authorId);\n            return result;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getFollowers(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsFollowersList(authorId);\n            return {\n                type: \"authors\",\n                items: result.items\n            };\n        } catch (e) {\n            return {\n                type: \"authors\",\n                items: []\n            };\n        }\n    }\n    async getPosts(authorId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsPostsList(authorId);\n            return result;\n        } catch (e) {\n            return {\n                type: \"posts\",\n                items: []\n            };\n        }\n    }\n    async getPost(authorId, postId) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsPostsRetrieve(authorId, postId);\n            return result;\n        } catch (e) {\n            return null;\n        }\n    }\n    async getComments(authorId, postId, page = 1, size = 10) {\n        try {\n            let result = await _gen__WEBPACK_IMPORTED_MODULE_1__.AuthorsService.authorsPostsCommentsList(authorId, postId, page, size);\n            return result;\n        } catch (err) {\n            return {\n                type: \"comments\",\n                comments: []\n            };\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API7);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/api.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/core/ApiError.ts":
/*!***************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/core/ApiError.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiError\": () => (/* binding */ ApiError)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ class ApiError extends Error {\n    constructor(request, response, message){\n        super(message);\n        this.name = \"ApiError\";\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vY29yZS9BcGlFcnJvci50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FJWCxNQUFNQSxpQkFBaUJDO0lBTzFCQyxZQUFZQyxPQUEwQixFQUFFQyxRQUFtQixFQUFFQyxPQUFlLENBQUU7UUFDMUUsS0FBSyxDQUFDQTtRQUVOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxHQUFHLEdBQUdILFNBQVNHLEdBQUc7UUFDdkIsSUFBSSxDQUFDQyxNQUFNLEdBQUdKLFNBQVNJLE1BQU07UUFDN0IsSUFBSSxDQUFDQyxVQUFVLEdBQUdMLFNBQVNLLFVBQVU7UUFDckMsSUFBSSxDQUFDQyxJQUFJLEdBQUdOLFNBQVNNLElBQUk7UUFDekIsSUFBSSxDQUFDUCxPQUFPLEdBQUdBO0lBQ25CO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL3NjaGVtYXMvdDcvZ2VuL2NvcmUvQXBpRXJyb3IudHM/ZjE3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgdHlwZSB7IEFwaVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi9BcGlSZXF1ZXN0T3B0aW9ucyc7XG5pbXBvcnQgdHlwZSB7IEFwaVJlc3VsdCB9IGZyb20gJy4vQXBpUmVzdWx0JztcblxuZXhwb3J0IGNsYXNzIEFwaUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHB1YmxpYyByZWFkb25seSB1cmw6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhdHVzOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IHN0YXR1c1RleHQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgYm9keTogYW55O1xuICAgIHB1YmxpYyByZWFkb25seSByZXF1ZXN0OiBBcGlSZXF1ZXN0T3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3Q6IEFwaVJlcXVlc3RPcHRpb25zLCByZXNwb25zZTogQXBpUmVzdWx0LCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ0FwaUVycm9yJztcbiAgICAgICAgdGhpcy51cmwgPSByZXNwb25zZS51cmw7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICB0aGlzLnN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgICAgICB0aGlzLmJvZHkgPSByZXNwb25zZS5ib2R5O1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJBcGlFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJtZXNzYWdlIiwibmFtZSIsInVybCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/core/ApiError.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/core/CancelablePromise.ts":
/*!************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/core/CancelablePromise.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CancelError\": () => (/* binding */ CancelError),\n/* harmony export */   \"CancelablePromise\": () => (/* binding */ CancelablePromise)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ class CancelError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"CancelError\";\n    }\n    get isCancelled() {\n        return true;\n    }\n}\nclass CancelablePromise {\n    constructor(executor){\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise((resolve, reject)=>{\n            this._resolve = resolve;\n            this._reject = reject;\n            const onResolve = (value)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n            const onReject = (reason)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n            const onCancel = (cancelHandler)=>{\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n            Object.defineProperty(onCancel, \"isResolved\", {\n                get: ()=>this._isResolved\n            });\n            Object.defineProperty(onCancel, \"isRejected\", {\n                get: ()=>this._isRejected\n            });\n            Object.defineProperty(onCancel, \"isCancelled\", {\n                get: ()=>this._isCancelled\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel() {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers){\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn(\"Cancellation threw an error\", error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError(\"Request aborted\"));\n    }\n    get isCancelled() {\n        return this._isCancelled;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/core/CancelablePromise.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts":
/*!**************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/core/OpenAPI.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OpenAPI\": () => (/* binding */ OpenAPI)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ const OpenAPI = {\n    BASE: \"https://sd7-api.herokuapp.com\" || 0,\n    VERSION: \"0.0.1\",\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: \"include\",\n    TOKEN: undefined,\n    USERNAME: \"node01\",\n    PASSWORD: \"P*ssw0rd!\",\n    HEADERS: undefined,\n    ENCODE_PATH: undefined\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vY29yZS9PcGVuQVBJLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixHQWtCWCxNQUFNQSxVQUF5QjtJQUNsQ0MsTUFBTUMsK0JBQWtDLElBQUk7SUFDNUNHLFNBQVM7SUFDVEMsa0JBQWtCLEtBQUs7SUFDdkJDLGFBQWE7SUFDYkMsT0FBT0M7SUFDUEMsVUFBVVIsUUFBZ0M7SUFDMUNVLFVBQVVWLFdBQTZCO0lBQ3ZDWSxTQUFTTDtJQUNUTSxhQUFhTjtBQUNqQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vY29yZS9PcGVuQVBJLnRzPzg4NzciXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHR5cGUgeyBBcGlSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4vQXBpUmVxdWVzdE9wdGlvbnMnO1xuXG50eXBlIFJlc29sdmVyPFQ+ID0gKG9wdGlvbnM6IEFwaVJlcXVlc3RPcHRpb25zKSA9PiBQcm9taXNlPFQ+O1xudHlwZSBIZWFkZXJzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuZXhwb3J0IHR5cGUgT3BlbkFQSUNvbmZpZyA9IHtcbiAgICBCQVNFOiBzdHJpbmc7XG4gICAgVkVSU0lPTjogc3RyaW5nO1xuICAgIFdJVEhfQ1JFREVOVElBTFM6IGJvb2xlYW47XG4gICAgQ1JFREVOVElBTFM6ICdpbmNsdWRlJyB8ICdvbWl0JyB8ICdzYW1lLW9yaWdpbic7XG4gICAgVE9LRU4/OiBzdHJpbmcgfCBSZXNvbHZlcjxzdHJpbmc+O1xuICAgIFVTRVJOQU1FPzogc3RyaW5nIHwgUmVzb2x2ZXI8c3RyaW5nPjtcbiAgICBQQVNTV09SRD86IHN0cmluZyB8IFJlc29sdmVyPHN0cmluZz47XG4gICAgSEVBREVSUz86IEhlYWRlcnMgfCBSZXNvbHZlcjxIZWFkZXJzPjtcbiAgICBFTkNPREVfUEFUSD86IChwYXRoOiBzdHJpbmcpID0+IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBPcGVuQVBJOiBPcGVuQVBJQ29uZmlnID0ge1xuICAgIEJBU0U6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1Q3X0FQSV9VUkwgfHwgJ2h0dHBzOi8vc2Q3LWFwaS5oZXJva3VhcHAuY29tJyxcbiAgICBWRVJTSU9OOiAnMC4wLjEnLFxuICAgIFdJVEhfQ1JFREVOVElBTFM6IGZhbHNlLFxuICAgIENSRURFTlRJQUxTOiAnaW5jbHVkZScsXG4gICAgVE9LRU46IHVuZGVmaW5lZCxcbiAgICBVU0VSTkFNRTogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVDdfVU5BTUUsXG4gICAgUEFTU1dPUkQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1Q3X1BXLFxuICAgIEhFQURFUlM6IHVuZGVmaW5lZCxcbiAgICBFTkNPREVfUEFUSDogdW5kZWZpbmVkLFxufTtcbiJdLCJuYW1lcyI6WyJPcGVuQVBJIiwiQkFTRSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19UN19BUElfVVJMIiwiVkVSU0lPTiIsIldJVEhfQ1JFREVOVElBTFMiLCJDUkVERU5USUFMUyIsIlRPS0VOIiwidW5kZWZpbmVkIiwiVVNFUk5BTUUiLCJORVhUX1BVQkxJQ19UN19VTkFNRSIsIlBBU1NXT1JEIiwiTkVYVF9QVUJMSUNfVDdfUFciLCJIRUFERVJTIiwiRU5DT0RFX1BBVEgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/core/request.ts":
/*!**************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/core/request.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"request\": () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! form-data */ \"form-data\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ApiError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApiError */ \"(api)/./src/nodes/schemas/t7/gen/core/ApiError.ts\");\n/* harmony import */ var _CancelablePromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CancelablePromise */ \"(api)/./src/nodes/schemas/t7/gen/core/CancelablePromise.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\n\n\nconst isDefined = (value)=>{\n    return value !== undefined && value !== null;\n};\nconst isString = (value)=>{\n    return typeof value === \"string\";\n};\nconst isStringWithValue = (value)=>{\n    return isString(value) && value !== \"\";\n};\nconst isBlob = (value)=>{\n    return typeof value === \"object\" && typeof value.type === \"string\" && typeof value.stream === \"function\" && typeof value.arrayBuffer === \"function\" && typeof value.constructor === \"function\" && typeof value.constructor.name === \"string\" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);\n};\nconst isFormData = (value)=>{\n    return value instanceof (form_data__WEBPACK_IMPORTED_MODULE_1___default());\n};\nconst isSuccess = (status)=>{\n    return status >= 200 && status < 300;\n};\nconst base64 = (str)=>{\n    try {\n        return btoa(str);\n    } catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString(\"base64\");\n    }\n};\nconst getQueryString = (params)=>{\n    const qs = [];\n    const append = (key, value)=>{\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n    const process = (key, value)=>{\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach((v)=>{\n                    process(key, v);\n                });\n            } else if (typeof value === \"object\") {\n                Object.entries(value).forEach(([k, v])=>{\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n    Object.entries(params).forEach(([key, value])=>{\n        process(key, value);\n    });\n    if (qs.length > 0) {\n        return `?${qs.join(\"&\")}`;\n    }\n    return \"\";\n};\nconst getUrl = (config, options)=>{\n    const encoder = config.ENCODE_PATH || encodeURI;\n    const path = options.url.replace(\"{api-version}\", config.VERSION).replace(/{(.*?)}/g, (substring, group)=>{\n        if (options.path?.hasOwnProperty(group)) {\n            return encoder(String(options.path[group]));\n        }\n        return substring;\n    });\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\nconst getFormData = (options)=>{\n    if (options.formData) {\n        const formData = new (form_data__WEBPACK_IMPORTED_MODULE_1___default())();\n        const process = (key, value)=>{\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n        Object.entries(options.formData).filter(([_, value])=>isDefined(value)).forEach(([key, value])=>{\n            if (Array.isArray(value)) {\n                value.forEach((v)=>process(key, v));\n            } else {\n                process(key, value);\n            }\n        });\n        return formData;\n    }\n    return undefined;\n};\nconst resolve = async (options, resolver)=>{\n    if (typeof resolver === \"function\") {\n        return resolver(options);\n    }\n    return resolver;\n};\nconst getHeaders = async (config, options, formData)=>{\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof formData?.getHeaders === \"function\" && formData?.getHeaders() || {};\n    const headers = Object.entries({\n        Accept: \"application/json\",\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders\n    }).filter(([_, value])=>isDefined(value)).reduce((headers, [key, value])=>({\n            ...headers,\n            [key]: String(value)\n        }), {});\n    if (isStringWithValue(token)) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers[\"Authorization\"] = `Basic ${credentials}`;\n    }\n    if (options.body) {\n        if (options.mediaType) {\n            headers[\"Content-Type\"] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n        } else if (isString(options.body)) {\n            headers[\"Content-Type\"] = \"text/plain\";\n        } else if (!isFormData(options.body)) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n    }\n    return headers;\n};\nconst getRequestBody = (options)=>{\n    if (options.body) {\n        return options.body;\n    }\n    return undefined;\n};\nconst sendRequest = async (config, options, url, body, formData, headers, onCancel)=>{\n    const source = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CancelToken.source();\n    const requestConfig = {\n        url,\n        headers,\n        data: body ?? formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token\n    };\n    onCancel(()=>source.cancel(\"The user aborted a request.\"));\n    try {\n        return await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].request(requestConfig);\n    } catch (error) {\n        const axiosError = error;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\nconst getResponseHeader = (response, responseHeader)=>{\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\nconst getResponseBody = (response)=>{\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return undefined;\n};\nconst catchErrorCodes = (options, result)=>{\n    const errors = {\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        500: \"Internal Server Error\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        ...options.errors\n    };\n    const error = errors[result.status];\n    if (error) {\n        throw new _ApiError__WEBPACK_IMPORTED_MODULE_2__.ApiError(options, result, error);\n    }\n    if (!result.ok) {\n        throw new _ApiError__WEBPACK_IMPORTED_MODULE_2__.ApiError(options, result, \"Generic Error\");\n    }\n};\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */ const request = (config, options)=>{\n    return new _CancelablePromise__WEBPACK_IMPORTED_MODULE_3__.CancelablePromise(async (resolve, reject, onCancel)=>{\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n                const result = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody\n                };\n                catchErrorCodes(options, result);\n                resolve(result.body);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/core/request.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/index.ts":
/*!*******************************************!*\
  !*** ./src/nodes/schemas/t7/gen/index.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApiError\": () => (/* reexport safe */ _core_ApiError__WEBPACK_IMPORTED_MODULE_0__.ApiError),\n/* harmony export */   \"AuthorsService\": () => (/* reexport safe */ _services_AuthorsService__WEBPACK_IMPORTED_MODULE_9__.AuthorsService),\n/* harmony export */   \"CancelError\": () => (/* reexport safe */ _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__.CancelError),\n/* harmony export */   \"CancelablePromise\": () => (/* reexport safe */ _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__.CancelablePromise),\n/* harmony export */   \"CommentContentTypeEnum\": () => (/* reexport safe */ _models_CommentContentTypeEnum__WEBPACK_IMPORTED_MODULE_3__.CommentContentTypeEnum),\n/* harmony export */   \"ContextEnum\": () => (/* reexport safe */ _models_ContextEnum__WEBPACK_IMPORTED_MODULE_4__.ContextEnum),\n/* harmony export */   \"InboxTypeEnum\": () => (/* reexport safe */ _models_InboxTypeEnum__WEBPACK_IMPORTED_MODULE_5__.InboxTypeEnum),\n/* harmony export */   \"NodeRetrieveTypeEnum\": () => (/* reexport safe */ _models_NodeRetrieveTypeEnum__WEBPACK_IMPORTED_MODULE_6__.NodeRetrieveTypeEnum),\n/* harmony export */   \"NodeService\": () => (/* reexport safe */ _services_NodeService__WEBPACK_IMPORTED_MODULE_10__.NodeService),\n/* harmony export */   \"OpenAPI\": () => (/* reexport safe */ _core_OpenAPI__WEBPACK_IMPORTED_MODULE_2__.OpenAPI),\n/* harmony export */   \"PostContentTypeEnum\": () => (/* reexport safe */ _models_PostContentTypeEnum__WEBPACK_IMPORTED_MODULE_7__.PostContentTypeEnum),\n/* harmony export */   \"PostsService\": () => (/* reexport safe */ _services_PostsService__WEBPACK_IMPORTED_MODULE_11__.PostsService),\n/* harmony export */   \"SchemaService\": () => (/* reexport safe */ _services_SchemaService__WEBPACK_IMPORTED_MODULE_12__.SchemaService),\n/* harmony export */   \"TokenService\": () => (/* reexport safe */ _services_TokenService__WEBPACK_IMPORTED_MODULE_13__.TokenService),\n/* harmony export */   \"VisibilityEnum\": () => (/* reexport safe */ _models_VisibilityEnum__WEBPACK_IMPORTED_MODULE_8__.VisibilityEnum)\n/* harmony export */ });\n/* harmony import */ var _core_ApiError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/ApiError */ \"(api)/./src/nodes/schemas/t7/gen/core/ApiError.ts\");\n/* harmony import */ var _core_CancelablePromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/CancelablePromise */ \"(api)/./src/nodes/schemas/t7/gen/core/CancelablePromise.ts\");\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _models_CommentContentTypeEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/CommentContentTypeEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/CommentContentTypeEnum.ts\");\n/* harmony import */ var _models_ContextEnum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models/ContextEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/ContextEnum.ts\");\n/* harmony import */ var _models_InboxTypeEnum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./models/InboxTypeEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/InboxTypeEnum.ts\");\n/* harmony import */ var _models_NodeRetrieveTypeEnum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./models/NodeRetrieveTypeEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/NodeRetrieveTypeEnum.ts\");\n/* harmony import */ var _models_PostContentTypeEnum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./models/PostContentTypeEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/PostContentTypeEnum.ts\");\n/* harmony import */ var _models_VisibilityEnum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./models/VisibilityEnum */ \"(api)/./src/nodes/schemas/t7/gen/models/VisibilityEnum.ts\");\n/* harmony import */ var _services_AuthorsService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/AuthorsService */ \"(api)/./src/nodes/schemas/t7/gen/services/AuthorsService.ts\");\n/* harmony import */ var _services_NodeService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./services/NodeService */ \"(api)/./src/nodes/schemas/t7/gen/services/NodeService.ts\");\n/* harmony import */ var _services_PostsService__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/PostsService */ \"(api)/./src/nodes/schemas/t7/gen/services/PostsService.ts\");\n/* harmony import */ var _services_SchemaService__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/SchemaService */ \"(api)/./src/nodes/schemas/t7/gen/services/SchemaService.ts\");\n/* harmony import */ var _services_TokenService__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/TokenService */ \"(api)/./src/nodes/schemas/t7/gen/services/TokenService.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_services_AuthorsService__WEBPACK_IMPORTED_MODULE_9__, _services_NodeService__WEBPACK_IMPORTED_MODULE_10__, _services_PostsService__WEBPACK_IMPORTED_MODULE_11__, _services_SchemaService__WEBPACK_IMPORTED_MODULE_12__, _services_TokenService__WEBPACK_IMPORTED_MODULE_13__]);\n([_services_AuthorsService__WEBPACK_IMPORTED_MODULE_9__, _services_NodeService__WEBPACK_IMPORTED_MODULE_10__, _services_PostsService__WEBPACK_IMPORTED_MODULE_11__, _services_SchemaService__WEBPACK_IMPORTED_MODULE_12__, _services_TokenService__WEBPACK_IMPORTED_MODULE_13__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUN5QjtBQUMrQjtBQUNqQztBQUlnQztBQUN0QjtBQUlJO0FBTWM7QUFVRjtBQUdWO0FBRUU7QUFDTjtBQUNFO0FBQ0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL3NjaGVtYXMvdDcvZ2VuL2luZGV4LnRzPzkwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZXhwb3J0IHsgQXBpRXJyb3IgfSBmcm9tICcuL2NvcmUvQXBpRXJyb3InO1xuZXhwb3J0IHsgQ2FuY2VsYWJsZVByb21pc2UsIENhbmNlbEVycm9yIH0gZnJvbSAnLi9jb3JlL0NhbmNlbGFibGVQcm9taXNlJztcbmV4cG9ydCB7IE9wZW5BUEkgfSBmcm9tICcuL2NvcmUvT3BlbkFQSSc7XG5leHBvcnQgdHlwZSB7IE9wZW5BUElDb25maWcgfSBmcm9tICcuL2NvcmUvT3BlbkFQSSc7XG5cbmV4cG9ydCB0eXBlIHsgQ29tbWVudCB9IGZyb20gJy4vbW9kZWxzL0NvbW1lbnQnO1xuZXhwb3J0IHsgQ29tbWVudENvbnRlbnRUeXBlRW51bSB9IGZyb20gJy4vbW9kZWxzL0NvbW1lbnRDb250ZW50VHlwZUVudW0nO1xuZXhwb3J0IHsgQ29udGV4dEVudW0gfSBmcm9tICcuL21vZGVscy9Db250ZXh0RW51bSc7XG5leHBvcnQgdHlwZSB7IEV4aXN0aW5nQXV0aG9yIH0gZnJvbSAnLi9tb2RlbHMvRXhpc3RpbmdBdXRob3InO1xuZXhwb3J0IHR5cGUgeyBGb2xsb3dlciB9IGZyb20gJy4vbW9kZWxzL0ZvbGxvd2VyJztcbmV4cG9ydCB0eXBlIHsgSW5ib3ggfSBmcm9tICcuL21vZGVscy9JbmJveCc7XG5leHBvcnQgeyBJbmJveFR5cGVFbnVtIH0gZnJvbSAnLi9tb2RlbHMvSW5ib3hUeXBlRW51bSc7XG5leHBvcnQgdHlwZSB7IExpa2UgfSBmcm9tICcuL21vZGVscy9MaWtlJztcbmV4cG9ydCB0eXBlIHsgTXlUb2tlbk9idGFpblBhaXIgfSBmcm9tICcuL21vZGVscy9NeVRva2VuT2J0YWluUGFpcic7XG5leHBvcnQgdHlwZSB7IE5ld0F1dGhvciB9IGZyb20gJy4vbW9kZWxzL05ld0F1dGhvcic7XG5leHBvcnQgdHlwZSB7IE5vZGVMaXN0IH0gZnJvbSAnLi9tb2RlbHMvTm9kZUxpc3QnO1xuZXhwb3J0IHR5cGUgeyBOb2RlUmV0cmlldmUgfSBmcm9tICcuL21vZGVscy9Ob2RlUmV0cmlldmUnO1xuZXhwb3J0IHsgTm9kZVJldHJpZXZlVHlwZUVudW0gfSBmcm9tICcuL21vZGVscy9Ob2RlUmV0cmlldmVUeXBlRW51bSc7XG5leHBvcnQgdHlwZSB7IFBhZ2luYXRlZENvbW1lbnRMaXN0IH0gZnJvbSAnLi9tb2RlbHMvUGFnaW5hdGVkQ29tbWVudExpc3QnO1xuZXhwb3J0IHR5cGUgeyBQYWdpbmF0ZWRGb2xsb3dlckxpc3QgfSBmcm9tICcuL21vZGVscy9QYWdpbmF0ZWRGb2xsb3dlckxpc3QnO1xuZXhwb3J0IHR5cGUgeyBQYWdpbmF0ZWRJbmJveExpc3QgfSBmcm9tICcuL21vZGVscy9QYWdpbmF0ZWRJbmJveExpc3QnO1xuZXhwb3J0IHR5cGUgeyBQYWdpbmF0ZWRMaWtlTGlzdCB9IGZyb20gJy4vbW9kZWxzL1BhZ2luYXRlZExpa2VMaXN0JztcbmV4cG9ydCB0eXBlIHsgUGFnaW5hdGVkTmV3QXV0aG9yTGlzdCB9IGZyb20gJy4vbW9kZWxzL1BhZ2luYXRlZE5ld0F1dGhvckxpc3QnO1xuZXhwb3J0IHR5cGUgeyBQYWdpbmF0ZWROb2RlTGlzdExpc3QgfSBmcm9tICcuL21vZGVscy9QYWdpbmF0ZWROb2RlTGlzdExpc3QnO1xuZXhwb3J0IHR5cGUgeyBQYWdpbmF0ZWRQb3N0TGlzdCB9IGZyb20gJy4vbW9kZWxzL1BhZ2luYXRlZFBvc3RMaXN0JztcbmV4cG9ydCB0eXBlIHsgUGF0Y2hlZFBvc3QgfSBmcm9tICcuL21vZGVscy9QYXRjaGVkUG9zdCc7XG5leHBvcnQgdHlwZSB7IFBvc3QgfSBmcm9tICcuL21vZGVscy9Qb3N0JztcbmV4cG9ydCB7IFBvc3RDb250ZW50VHlwZUVudW0gfSBmcm9tICcuL21vZGVscy9Qb3N0Q29udGVudFR5cGVFbnVtJztcbmV4cG9ydCB0eXBlIHsgVG9rZW5SZWZyZXNoIH0gZnJvbSAnLi9tb2RlbHMvVG9rZW5SZWZyZXNoJztcbmV4cG9ydCB0eXBlIHsgVG9rZW5WZXJpZnkgfSBmcm9tICcuL21vZGVscy9Ub2tlblZlcmlmeSc7XG5leHBvcnQgeyBWaXNpYmlsaXR5RW51bSB9IGZyb20gJy4vbW9kZWxzL1Zpc2liaWxpdHlFbnVtJztcblxuZXhwb3J0IHsgQXV0aG9yc1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL0F1dGhvcnNTZXJ2aWNlJztcbmV4cG9ydCB7IE5vZGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9Ob2RlU2VydmljZSc7XG5leHBvcnQgeyBQb3N0c1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL1Bvc3RzU2VydmljZSc7XG5leHBvcnQgeyBTY2hlbWFTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9TY2hlbWFTZXJ2aWNlJztcbmV4cG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvVG9rZW5TZXJ2aWNlJztcbiJdLCJuYW1lcyI6WyJBcGlFcnJvciIsIkNhbmNlbGFibGVQcm9taXNlIiwiQ2FuY2VsRXJyb3IiLCJPcGVuQVBJIiwiQ29tbWVudENvbnRlbnRUeXBlRW51bSIsIkNvbnRleHRFbnVtIiwiSW5ib3hUeXBlRW51bSIsIk5vZGVSZXRyaWV2ZVR5cGVFbnVtIiwiUG9zdENvbnRlbnRUeXBlRW51bSIsIlZpc2liaWxpdHlFbnVtIiwiQXV0aG9yc1NlcnZpY2UiLCJOb2RlU2VydmljZSIsIlBvc3RzU2VydmljZSIsIlNjaGVtYVNlcnZpY2UiLCJUb2tlblNlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/index.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/CommentContentTypeEnum.ts":
/*!*******************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/CommentContentTypeEnum.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentContentTypeEnum\": () => (/* binding */ CommentContentTypeEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var CommentContentTypeEnum;\n(function(CommentContentTypeEnum) {\n    CommentContentTypeEnum[\"TEXT_MARKDOWN\"] = \"text/markdown\";\n    CommentContentTypeEnum[\"TEXT_PLAIN\"] = \"text/plain\";\n})(CommentContentTypeEnum || (CommentContentTypeEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL0NvbW1lbnRDb250ZW50VHlwZUVudW0udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLE9BRVg7VUFBS0Esc0JBQXNCO0lBQXRCQSx1QkFDUkMsbUJBQWdCO0lBRFJELHVCQUVSRSxnQkFBYTtHQUZMRiwyQkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9tb2RlbHMvQ29tbWVudENvbnRlbnRUeXBlRW51bS50cz8wNjIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuZXhwb3J0IGVudW0gQ29tbWVudENvbnRlbnRUeXBlRW51bSB7XG4gICAgVEVYVF9NQVJLRE9XTiA9ICd0ZXh0L21hcmtkb3duJyxcbiAgICBURVhUX1BMQUlOID0gJ3RleHQvcGxhaW4nLFxufVxuIl0sIm5hbWVzIjpbIkNvbW1lbnRDb250ZW50VHlwZUVudW0iLCJURVhUX01BUktET1dOIiwiVEVYVF9QTEFJTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/CommentContentTypeEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/ContextEnum.ts":
/*!********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/ContextEnum.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContextEnum\": () => (/* binding */ ContextEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var ContextEnum;\n(function(ContextEnum) {\n    ContextEnum[\"HTTPS_WWW_W3_ORG_NS_ACTIVITYSTREAMS\"] = \"https://www.w3.org/ns/activitystreams\";\n})(ContextEnum || (ContextEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL0NvbnRleHRFbnVtLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixPQUVYO1VBQUtBLFdBQVc7SUFBWEEsWUFDUkMseUNBQXNDO0dBRDlCRCxnQkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9tb2RlbHMvQ29udGV4dEVudW0udHM/ZGRmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBlbnVtIENvbnRleHRFbnVtIHtcbiAgICBIVFRQU19XV1dfVzNfT1JHX05TX0FDVElWSVRZU1RSRUFNUyA9ICdodHRwczovL3d3dy53My5vcmcvbnMvYWN0aXZpdHlzdHJlYW1zJyxcbn1cbiJdLCJuYW1lcyI6WyJDb250ZXh0RW51bSIsIkhUVFBTX1dXV19XM19PUkdfTlNfQUNUSVZJVFlTVFJFQU1TIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/ContextEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/InboxTypeEnum.ts":
/*!**********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/InboxTypeEnum.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InboxTypeEnum\": () => (/* binding */ InboxTypeEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var InboxTypeEnum;\n(function(InboxTypeEnum) {\n    InboxTypeEnum[\"POST\"] = \"post\";\n    InboxTypeEnum[\"LIKE\"] = \"like\";\n    InboxTypeEnum[\"FOLLOW\"] = \"follow\";\n    InboxTypeEnum[\"COMMENT\"] = \"comment\";\n})(InboxTypeEnum || (InboxTypeEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL0luYm94VHlwZUVudW0udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLE9BRVg7VUFBS0EsYUFBYTtJQUFiQSxjQUNSQyxVQUFPO0lBRENELGNBRVJFLFVBQU87SUFGQ0YsY0FHUkcsWUFBUztJQUhESCxjQUlSSSxhQUFVO0dBSkZKLGtCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL25vZGVzL3NjaGVtYXMvdDcvZ2VuL21vZGVscy9JbmJveFR5cGVFbnVtLnRzPzI4YTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5leHBvcnQgZW51bSBJbmJveFR5cGVFbnVtIHtcbiAgICBQT1NUID0gJ3Bvc3QnLFxuICAgIExJS0UgPSAnbGlrZScsXG4gICAgRk9MTE9XID0gJ2ZvbGxvdycsXG4gICAgQ09NTUVOVCA9ICdjb21tZW50Jyxcbn1cbiJdLCJuYW1lcyI6WyJJbmJveFR5cGVFbnVtIiwiUE9TVCIsIkxJS0UiLCJGT0xMT1ciLCJDT01NRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/InboxTypeEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/NodeRetrieveTypeEnum.ts":
/*!*****************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/NodeRetrieveTypeEnum.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NodeRetrieveTypeEnum\": () => (/* binding */ NodeRetrieveTypeEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var NodeRetrieveTypeEnum;\n(function(NodeRetrieveTypeEnum) {\n    NodeRetrieveTypeEnum[\"POST\"] = \"post\";\n    NodeRetrieveTypeEnum[\"LIKE\"] = \"like\";\n    NodeRetrieveTypeEnum[\"FOLLOW\"] = \"follow\";\n    NodeRetrieveTypeEnum[\"COMMENT\"] = \"comment\";\n    NodeRetrieveTypeEnum[\"AUTHOR\"] = \"author\";\n})(NodeRetrieveTypeEnum || (NodeRetrieveTypeEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL05vZGVSZXRyaWV2ZVR5cGVFbnVtLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixPQUVYO1VBQUtBLG9CQUFvQjtJQUFwQkEscUJBQ1JDLFVBQU87SUFEQ0QscUJBRVJFLFVBQU87SUFGQ0YscUJBR1JHLFlBQVM7SUFIREgscUJBSVJJLGFBQVU7SUFKRkoscUJBS1JLLFlBQVM7R0FMREwseUJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL05vZGVSZXRyaWV2ZVR5cGVFbnVtLnRzPzRhMzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5leHBvcnQgZW51bSBOb2RlUmV0cmlldmVUeXBlRW51bSB7XG4gICAgUE9TVCA9ICdwb3N0JyxcbiAgICBMSUtFID0gJ2xpa2UnLFxuICAgIEZPTExPVyA9ICdmb2xsb3cnLFxuICAgIENPTU1FTlQgPSAnY29tbWVudCcsXG4gICAgQVVUSE9SID0gJ2F1dGhvcicsXG59XG4iXSwibmFtZXMiOlsiTm9kZVJldHJpZXZlVHlwZUVudW0iLCJQT1NUIiwiTElLRSIsIkZPTExPVyIsIkNPTU1FTlQiLCJBVVRIT1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/NodeRetrieveTypeEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/PostContentTypeEnum.ts":
/*!****************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/PostContentTypeEnum.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PostContentTypeEnum\": () => (/* binding */ PostContentTypeEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var PostContentTypeEnum;\n(function(PostContentTypeEnum) {\n    PostContentTypeEnum[\"TEXT_MARKDOWN\"] = \"text/markdown\";\n    PostContentTypeEnum[\"TEXT_PLAIN\"] = \"text/plain\";\n    PostContentTypeEnum[\"APPLICATION_BASE64\"] = \"application/base64\";\n    PostContentTypeEnum[\"IMAGE_PNG_BASE64\"] = \"image/png;base64\";\n    PostContentTypeEnum[\"IMAGE_JPEG_BASE64\"] = \"image/jpeg;base64\";\n})(PostContentTypeEnum || (PostContentTypeEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL1Bvc3RDb250ZW50VHlwZUVudW0udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLE9BRVg7VUFBS0EsbUJBQW1CO0lBQW5CQSxvQkFDUkMsbUJBQWdCO0lBRFJELG9CQUVSRSxnQkFBYTtJQUZMRixvQkFHUkcsd0JBQXFCO0lBSGJILG9CQUlSSSxzQkFBbUI7SUFKWEosb0JBS1JLLHVCQUFvQjtHQUxaTCx3QkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9tb2RlbHMvUG9zdENvbnRlbnRUeXBlRW51bS50cz8yYTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cblxuZXhwb3J0IGVudW0gUG9zdENvbnRlbnRUeXBlRW51bSB7XG4gICAgVEVYVF9NQVJLRE9XTiA9ICd0ZXh0L21hcmtkb3duJyxcbiAgICBURVhUX1BMQUlOID0gJ3RleHQvcGxhaW4nLFxuICAgIEFQUExJQ0FUSU9OX0JBU0U2NCA9ICdhcHBsaWNhdGlvbi9iYXNlNjQnLFxuICAgIElNQUdFX1BOR19CQVNFNjQgPSAnaW1hZ2UvcG5nO2Jhc2U2NCcsXG4gICAgSU1BR0VfSlBFR19CQVNFNjQgPSAnaW1hZ2UvanBlZztiYXNlNjQnLFxufVxuIl0sIm5hbWVzIjpbIlBvc3RDb250ZW50VHlwZUVudW0iLCJURVhUX01BUktET1dOIiwiVEVYVF9QTEFJTiIsIkFQUExJQ0FUSU9OX0JBU0U2NCIsIklNQUdFX1BOR19CQVNFNjQiLCJJTUFHRV9KUEVHX0JBU0U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/PostContentTypeEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/models/VisibilityEnum.ts":
/*!***********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/models/VisibilityEnum.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VisibilityEnum\": () => (/* binding */ VisibilityEnum)\n/* harmony export */ });\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ var VisibilityEnum;\n(function(VisibilityEnum) {\n    VisibilityEnum[\"FRIENDS\"] = \"FRIENDS\";\n    VisibilityEnum[\"PUBLIC\"] = \"PUBLIC\";\n})(VisibilityEnum || (VisibilityEnum = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL1Zpc2liaWxpdHlFbnVtLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixPQUVYO1VBQUtBLGNBQWM7SUFBZEEsZUFDUkMsYUFBQUE7SUFEUUQsZUFFUkUsWUFBQUE7R0FGUUYsbUJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vbW9kZWxzL1Zpc2liaWxpdHlFbnVtLnRzPzg1ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5leHBvcnQgZW51bSBWaXNpYmlsaXR5RW51bSB7XG4gICAgRlJJRU5EUyA9ICdGUklFTkRTJyxcbiAgICBQVUJMSUMgPSAnUFVCTElDJyxcbn1cbiJdLCJuYW1lcyI6WyJWaXNpYmlsaXR5RW51bSIsIkZSSUVORFMiLCJQVUJMSUMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/models/VisibilityEnum.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/services/AuthorsService.ts":
/*!*************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/services/AuthorsService.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AuthorsService\": () => (/* binding */ AuthorsService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t7/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass AuthorsService {\n    /**\n     * GET request that returns list of authors ordered by username\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedNewAuthorList\n     * @throws ApiError\n     */ static authorsList(page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/\",\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * POST request that creates a new author\n     * @param requestBody\n     * @returns NewAuthor\n     * @throws ApiError\n     */ static authorsCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedFollowerList\n     * @throws ApiError\n     */ static authorsFollowersList(authorUuid, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/followers/\",\n            path: {\n                \"author_uuid\": authorUuid\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param followerNodeId\n     * @returns Follower\n     * @throws ApiError\n     */ static authorsFollowersRetrieve(authorUuid, followerNodeId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/followers/{follower_node_id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"follower_node_id\": followerNodeId\n            }\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param followerNodeId\n     * @param requestBody\n     * @returns Follower\n     * @throws ApiError\n     */ static authorsFollowersUpdate(authorUuid, followerNodeId, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"PUT\",\n            url: \"/api/authors/{author_uuid}/followers/{follower_node_id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"follower_node_id\": followerNodeId\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param followerNodeId\n     * @returns void\n     * @throws ApiError\n     */ static authorsFollowersDestroy(authorUuid, followerNodeId) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/api/authors/{author_uuid}/followers/{follower_node_id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"follower_node_id\": followerNodeId\n            }\n        });\n    }\n    /**\n     * GET Paginated list of recent author_uuid's inbox things\n     * @param authorUuid\n     * @param count\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedInboxList\n     * @throws ApiError\n     */ static authorsInboxList(authorUuid, count, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/inbox/\",\n            path: {\n                \"author_uuid\": authorUuid\n            },\n            query: {\n                \"count\": count,\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * POST Add new object to author's inbox\n     * @param authorUuid\n     * @param requestBody\n     * @returns Inbox\n     * @throws ApiError\n     */ static authorsInboxCreate(authorUuid, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/{author_uuid}/inbox/\",\n            path: {\n                \"author_uuid\": authorUuid\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @returns void\n     * @throws ApiError\n     */ static authorsInboxDestroy(authorUuid) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/api/authors/{author_uuid}/inbox/\",\n            path: {\n                \"author_uuid\": authorUuid\n            }\n        });\n    }\n    /**\n     * GET posts associated with author_uuid\n     * @param authorUuid\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedPostList\n     * @throws ApiError\n     */ static authorsPostsList(authorUuid, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/\",\n            path: {\n                \"author_uuid\": authorUuid\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param requestBody\n     * @returns Post\n     * @throws ApiError\n     */ static authorsPostsCreate(authorUuid, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/{author_uuid}/posts/\",\n            path: {\n                \"author_uuid\": authorUuid\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param id\n     * @returns Post\n     * @throws ApiError\n     */ static authorsPostsRetrieve(authorUuid, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param id\n     * @param requestBody\n     * @returns Post\n     * @throws ApiError\n     */ static postPostUpdate(authorUuid, id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param id\n     * @param requestBody\n     * @returns Post\n     * @throws ApiError\n     */ static postPutCreateUpdate(authorUuid, id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"PUT\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param id\n     * @param requestBody\n     * @returns Post\n     * @throws ApiError\n     */ static authorsPostsPartialUpdate(authorUuid, id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"PATCH\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * @param authorUuid\n     * @param id\n     * @returns void\n     * @throws ApiError\n     */ static authorsPostsDestroy(authorUuid, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"DELETE\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * Get an object from another node\n     * @param authorUuid\n     * @param id\n     * @returns any No response body\n     * @throws ApiError\n     */ static authorsPostsImageRetrieve(authorUuid, id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/{id}/image\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * GET a list of comments associated with post_uuid\n     * @param authorUuid\n     * @param postUuid\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedCommentList\n     * @throws ApiError\n     */ static authorsPostsCommentsList(authorUuid, postUuid, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/{post_uuid}/comments/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"post_uuid\": postUuid\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * Create a new comment on post post_uuid\n     * @param authorUuid\n     * @param postUuid\n     * @param requestBody\n     * @returns Comment\n     * @throws ApiError\n     */ static authorsPostsCommentsCreate(authorUuid, postUuid, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/{author_uuid}/posts/{post_uuid}/comments/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"post_uuid\": postUuid\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * A view for getting a list of likes on a comment\n     * @param authorUuid\n     * @param commentUuid\n     * @param postUuid\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedLikeList\n     * @throws ApiError\n     */ static authorsPostsCommentsLikesList(authorUuid, commentUuid, postUuid, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/{post_uuid}/comments/{comment_uuid}/likes/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"comment_uuid\": commentUuid,\n                \"post_uuid\": postUuid\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * A view for getting a list of likes on a post\n     * @param authorUuid\n     * @param postUuid\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedLikeList\n     * @throws ApiError\n     */ static authorsPostsLikesList(authorUuid, postUuid, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{author_uuid}/posts/{post_uuid}/likes/\",\n            path: {\n                \"author_uuid\": authorUuid,\n                \"post_uuid\": postUuid\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * GET request that returns a specific user\n     * @param id\n     * @returns ExistingAuthor\n     * @throws ApiError\n     */ static authorsRetrieve(id) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/authors/{id}/\",\n            path: {\n                \"id\": id\n            }\n        });\n    }\n    /**\n     * POST request that updates an author's profile\n     * @param id\n     * @param requestBody\n     * @returns ExistingAuthor\n     * @throws ApiError\n     */ static authorsUpdate(id, requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/authors/{id}/\",\n            path: {\n                \"id\": id\n            },\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/services/AuthorsService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/services/NodeService.ts":
/*!**********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/services/NodeService.ts ***!
  \**********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NodeService\": () => (/* binding */ NodeService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t7/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass NodeService {\n    /**\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedNodeListList\n     * @throws ApiError\n     */ static nodeList(page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/node/\",\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * Get public posts from another node'\n     * @param nodeGetUrl\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedNodeListList\n     * @throws ApiError\n     */ static nodeList2(nodeGetUrl, page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/node/{nodeGetURL}/\",\n            path: {\n                \"nodeGetURL\": nodeGetUrl\n            },\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n    /**\n     * Get an object from another node\n     * @returns NodeRetrieve\n     * @throws ApiError\n     */ static nodeObjectRetrieve() {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/node/object/\"\n        });\n    }\n    /**\n     * Post an object to a node's author's inboxes\n     * @param requestBody\n     * @returns NodeRetrieve\n     * @throws ApiError\n     */ static nodeObjectCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/node/object/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vc2VydmljZXMvTm9kZVNlcnZpY2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0JBQXdCLEdBQ3hCLGtCQUFrQixHQUNsQixrQkFBa0IsR0FLd0I7QUFDYTtBQUVoRCxNQUFNRztJQUVUOzs7OztLQUtDLEdBQ0QsT0FBY0MsU0FDVkMsSUFBYSxFQUNiQyxJQUFhLEVBQzJCO1FBQ3hDLE9BQU9KLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0Qk8sUUFBUTtZQUNSQyxLQUFLO1lBQ0xDLE9BQU87Z0JBQ0gsUUFBUUo7Z0JBQ1IsUUFBUUM7WUFDWjtRQUNKO0lBQ0o7SUFFQTs7Ozs7OztLQU9DLEdBQ0QsT0FBY0ksVUFDVkMsVUFBa0IsRUFDbEJOLElBQWEsRUFDYkMsSUFBYSxFQUMyQjtRQUN4QyxPQUFPSixzREFBU0EsQ0FBQ0Ysa0RBQU9BLEVBQUU7WUFDdEJPLFFBQVE7WUFDUkMsS0FBSztZQUNMSSxNQUFNO2dCQUNGLGNBQWNEO1lBQ2xCO1lBQ0FGLE9BQU87Z0JBQ0gsUUFBUUo7Z0JBQ1IsUUFBUUM7WUFDWjtRQUNKO0lBQ0o7SUFFQTs7OztLQUlDLEdBQ0QsT0FBY08scUJBQXNEO1FBQ2hFLE9BQU9YLHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0Qk8sUUFBUTtZQUNSQyxLQUFLO1FBQ1Q7SUFDSjtJQUVBOzs7OztLQUtDLEdBQ0QsT0FBY00saUJBQ1ZDLFdBQXlCLEVBQ007UUFDL0IsT0FBT2Isc0RBQVNBLENBQUNGLGtEQUFPQSxFQUFFO1lBQ3RCTyxRQUFRO1lBQ1JDLEtBQUs7WUFDTFEsTUFBTUQ7WUFDTkUsV0FBVztRQUNmO0lBQ0o7QUFFSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vc2VydmljZXMvTm9kZVNlcnZpY2UudHM/YmIxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgdHlwZSB7IE5vZGVSZXRyaWV2ZSB9IGZyb20gJy4uL21vZGVscy9Ob2RlUmV0cmlldmUnO1xuaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZWROb2RlTGlzdExpc3QgfSBmcm9tICcuLi9tb2RlbHMvUGFnaW5hdGVkTm9kZUxpc3RMaXN0JztcblxuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUvQ2FuY2VsYWJsZVByb21pc2UnO1xuaW1wb3J0IHsgT3BlbkFQSSB9IGZyb20gJy4uL2NvcmUvT3BlbkFQSSc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIF9fcmVxdWVzdCB9IGZyb20gJy4uL2NvcmUvcmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBOb2RlU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcGFnZSBBIHBhZ2UgbnVtYmVyIHdpdGhpbiB0aGUgcGFnaW5hdGVkIHJlc3VsdCBzZXQuXG4gICAgICogQHBhcmFtIHNpemUgTnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuIHBlciBwYWdlLlxuICAgICAqIEByZXR1cm5zIFBhZ2luYXRlZE5vZGVMaXN0TGlzdFxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIG5vZGVMaXN0KFxuICAgICAgICBwYWdlPzogbnVtYmVyLFxuICAgICAgICBzaXplPzogbnVtYmVyLFxuICAgICk6IENhbmNlbGFibGVQcm9taXNlPFBhZ2luYXRlZE5vZGVMaXN0TGlzdD4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL25vZGUvJyxcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgJ3BhZ2UnOiBwYWdlLFxuICAgICAgICAgICAgICAgICdzaXplJzogc2l6ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBwdWJsaWMgcG9zdHMgZnJvbSBhbm90aGVyIG5vZGUnXG4gICAgICogQHBhcmFtIG5vZGVHZXRVcmxcbiAgICAgKiBAcGFyYW0gcGFnZSBBIHBhZ2UgbnVtYmVyIHdpdGhpbiB0aGUgcGFnaW5hdGVkIHJlc3VsdCBzZXQuXG4gICAgICogQHBhcmFtIHNpemUgTnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuIHBlciBwYWdlLlxuICAgICAqIEByZXR1cm5zIFBhZ2luYXRlZE5vZGVMaXN0TGlzdFxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIG5vZGVMaXN0MihcbiAgICAgICAgbm9kZUdldFVybDogc3RyaW5nLFxuICAgICAgICBwYWdlPzogbnVtYmVyLFxuICAgICAgICBzaXplPzogbnVtYmVyLFxuICAgICk6IENhbmNlbGFibGVQcm9taXNlPFBhZ2luYXRlZE5vZGVMaXN0TGlzdD4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL25vZGUve25vZGVHZXRVUkx9LycsXG4gICAgICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICAgICAgJ25vZGVHZXRVUkwnOiBub2RlR2V0VXJsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgJ3BhZ2UnOiBwYWdlLFxuICAgICAgICAgICAgICAgICdzaXplJzogc2l6ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBvYmplY3QgZnJvbSBhbm90aGVyIG5vZGVcbiAgICAgKiBAcmV0dXJucyBOb2RlUmV0cmlldmVcbiAgICAgKiBAdGhyb3dzIEFwaUVycm9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBub2RlT2JqZWN0UmV0cmlldmUoKTogQ2FuY2VsYWJsZVByb21pc2U8Tm9kZVJldHJpZXZlPiB7XG4gICAgICAgIHJldHVybiBfX3JlcXVlc3QoT3BlbkFQSSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvbm9kZS9vYmplY3QvJyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBhbiBvYmplY3QgdG8gYSBub2RlJ3MgYXV0aG9yJ3MgaW5ib3hlc1xuICAgICAqIEBwYXJhbSByZXF1ZXN0Qm9keVxuICAgICAqIEByZXR1cm5zIE5vZGVSZXRyaWV2ZVxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIG5vZGVPYmplY3RDcmVhdGUoXG4gICAgICAgIHJlcXVlc3RCb2R5OiBOb2RlUmV0cmlldmUsXG4gICAgKTogQ2FuY2VsYWJsZVByb21pc2U8Tm9kZVJldHJpZXZlPiB7XG4gICAgICAgIHJldHVybiBfX3JlcXVlc3QoT3BlbkFQSSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL25vZGUvb2JqZWN0LycsXG4gICAgICAgICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIG1lZGlhVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJPcGVuQVBJIiwicmVxdWVzdCIsIl9fcmVxdWVzdCIsIk5vZGVTZXJ2aWNlIiwibm9kZUxpc3QiLCJwYWdlIiwic2l6ZSIsIm1ldGhvZCIsInVybCIsInF1ZXJ5Iiwibm9kZUxpc3QyIiwibm9kZUdldFVybCIsInBhdGgiLCJub2RlT2JqZWN0UmV0cmlldmUiLCJub2RlT2JqZWN0Q3JlYXRlIiwicmVxdWVzdEJvZHkiLCJib2R5IiwibWVkaWFUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/services/NodeService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/services/PostsService.ts":
/*!***********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/services/PostsService.ts ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PostsService\": () => (/* binding */ PostsService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t7/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass PostsService {\n    /**\n     * GET a paginated list of all PUBLIC posts\n     * @param page A page number within the paginated result set.\n     * @param size Number of results to return per page.\n     * @returns PaginatedPostList\n     * @throws ApiError\n     */ static postsList(page, size) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/posts/\",\n            query: {\n                \"page\": page,\n                \"size\": size\n            }\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vc2VydmljZXMvUG9zdHNTZXJ2aWNlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLEdBSXdCO0FBQ2E7QUFFaEQsTUFBTUc7SUFFVDs7Ozs7O0tBTUMsR0FDRCxPQUFjQyxVQUNWQyxJQUFhLEVBQ2JDLElBQWEsRUFDdUI7UUFDcEMsT0FBT0osc0RBQVNBLENBQUNGLGtEQUFPQSxFQUFFO1lBQ3RCTyxRQUFRO1lBQ1JDLEtBQUs7WUFDTEMsT0FBTztnQkFDSCxRQUFRSjtnQkFDUixRQUFRQztZQUNaO1FBQ0o7SUFDSjtBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9zZXJ2aWNlcy9Qb3N0c1NlcnZpY2UudHM/NmJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgdHlwZSB7IFBhZ2luYXRlZFBvc3RMaXN0IH0gZnJvbSAnLi4vbW9kZWxzL1BhZ2luYXRlZFBvc3RMaXN0JztcblxuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUvQ2FuY2VsYWJsZVByb21pc2UnO1xuaW1wb3J0IHsgT3BlbkFQSSB9IGZyb20gJy4uL2NvcmUvT3BlbkFQSSc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIF9fcmVxdWVzdCB9IGZyb20gJy4uL2NvcmUvcmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBQb3N0c1NlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogR0VUIGEgcGFnaW5hdGVkIGxpc3Qgb2YgYWxsIFBVQkxJQyBwb3N0c1xuICAgICAqIEBwYXJhbSBwYWdlIEEgcGFnZSBudW1iZXIgd2l0aGluIHRoZSBwYWdpbmF0ZWQgcmVzdWx0IHNldC5cbiAgICAgKiBAcGFyYW0gc2l6ZSBOdW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4gcGVyIHBhZ2UuXG4gICAgICogQHJldHVybnMgUGFnaW5hdGVkUG9zdExpc3RcbiAgICAgKiBAdGhyb3dzIEFwaUVycm9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwb3N0c0xpc3QoXG4gICAgICAgIHBhZ2U/OiBudW1iZXIsXG4gICAgICAgIHNpemU/OiBudW1iZXIsXG4gICAgKTogQ2FuY2VsYWJsZVByb21pc2U8UGFnaW5hdGVkUG9zdExpc3Q+IHtcbiAgICAgICAgcmV0dXJuIF9fcmVxdWVzdChPcGVuQVBJLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnL2FwaS9wb3N0cy8nLFxuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAncGFnZSc6IHBhZ2UsXG4gICAgICAgICAgICAgICAgJ3NpemUnOiBzaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iXSwibmFtZXMiOlsiT3BlbkFQSSIsInJlcXVlc3QiLCJfX3JlcXVlc3QiLCJQb3N0c1NlcnZpY2UiLCJwb3N0c0xpc3QiLCJwYWdlIiwic2l6ZSIsIm1ldGhvZCIsInVybCIsInF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/services/PostsService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/services/SchemaService.ts":
/*!************************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/services/SchemaService.ts ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SchemaService\": () => (/* binding */ SchemaService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t7/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass SchemaService {\n    /**\n     * OpenApi3 schema for this API. Format can be selected via content negotiation.\n     *\n     * - YAML: application/vnd.oai.openapi\n     * - JSON: application/vnd.oai.openapi+json\n     * @param format\n     * @param lang\n     * @returns any\n     * @throws ApiError\n     */ static schemaRetrieve(format, lang) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"GET\",\n            url: \"/api/schema/\",\n            query: {\n                \"format\": format,\n                \"lang\": lang\n            }\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vc2VydmljZXMvU2NoZW1hU2VydmljZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3QkFBd0IsR0FDeEIsa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUV3QjtBQUNhO0FBRWhELE1BQU1HO0lBRVQ7Ozs7Ozs7OztLQVNDLEdBQ0QsT0FBY0MsZUFDVkMsTUFBd0IsRUFDeEJDLElBQW10QixFQUM3cUI7UUFDdEMsT0FBT0osc0RBQVNBLENBQUNGLGtEQUFPQSxFQUFFO1lBQ3RCTyxRQUFRO1lBQ1JDLEtBQUs7WUFDTEMsT0FBTztnQkFDSCxVQUFVSjtnQkFDVixRQUFRQztZQUNaO1FBQ0o7SUFDSjtBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9zZXJ2aWNlcy9TY2hlbWFTZXJ2aWNlLnRzPzYzNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUvQ2FuY2VsYWJsZVByb21pc2UnO1xuaW1wb3J0IHsgT3BlbkFQSSB9IGZyb20gJy4uL2NvcmUvT3BlbkFQSSc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIF9fcmVxdWVzdCB9IGZyb20gJy4uL2NvcmUvcmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBTY2hlbWFTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIE9wZW5BcGkzIHNjaGVtYSBmb3IgdGhpcyBBUEkuIEZvcm1hdCBjYW4gYmUgc2VsZWN0ZWQgdmlhIGNvbnRlbnQgbmVnb3RpYXRpb24uXG4gICAgICpcbiAgICAgKiAtIFlBTUw6IGFwcGxpY2F0aW9uL3ZuZC5vYWkub3BlbmFwaVxuICAgICAqIC0gSlNPTjogYXBwbGljYXRpb24vdm5kLm9haS5vcGVuYXBpK2pzb25cbiAgICAgKiBAcGFyYW0gZm9ybWF0XG4gICAgICogQHBhcmFtIGxhbmdcbiAgICAgKiBAcmV0dXJucyBhbnlcbiAgICAgKiBAdGhyb3dzIEFwaUVycm9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzY2hlbWFSZXRyaWV2ZShcbiAgICAgICAgZm9ybWF0PzogJ2pzb24nIHwgJ3lhbWwnLFxuICAgICAgICBsYW5nPzogJ2FmJyB8ICdhcicgfCAnYXItZHonIHwgJ2FzdCcgfCAnYXonIHwgJ2JlJyB8ICdiZycgfCAnYm4nIHwgJ2JyJyB8ICdicycgfCAnY2EnIHwgJ2NzJyB8ICdjeScgfCAnZGEnIHwgJ2RlJyB8ICdkc2InIHwgJ2VsJyB8ICdlbicgfCAnZW4tYXUnIHwgJ2VuLWdiJyB8ICdlbycgfCAnZXMnIHwgJ2VzLWFyJyB8ICdlcy1jbycgfCAnZXMtbXgnIHwgJ2VzLW5pJyB8ICdlcy12ZScgfCAnZXQnIHwgJ2V1JyB8ICdmYScgfCAnZmknIHwgJ2ZyJyB8ICdmeScgfCAnZ2EnIHwgJ2dkJyB8ICdnbCcgfCAnaGUnIHwgJ2hpJyB8ICdocicgfCAnaHNiJyB8ICdodScgfCAnaHknIHwgJ2lhJyB8ICdpZCcgfCAnaWcnIHwgJ2lvJyB8ICdpcycgfCAnaXQnIHwgJ2phJyB8ICdrYScgfCAna2FiJyB8ICdraycgfCAna20nIHwgJ2tuJyB8ICdrbycgfCAna3knIHwgJ2xiJyB8ICdsdCcgfCAnbHYnIHwgJ21rJyB8ICdtbCcgfCAnbW4nIHwgJ21yJyB8ICdteScgfCAnbmInIHwgJ25lJyB8ICdubCcgfCAnbm4nIHwgJ29zJyB8ICdwYScgfCAncGwnIHwgJ3B0JyB8ICdwdC1icicgfCAncm8nIHwgJ3J1JyB8ICdzaycgfCAnc2wnIHwgJ3NxJyB8ICdzcicgfCAnc3ItbGF0bicgfCAnc3YnIHwgJ3N3JyB8ICd0YScgfCAndGUnIHwgJ3RnJyB8ICd0aCcgfCAndGsnIHwgJ3RyJyB8ICd0dCcgfCAndWRtJyB8ICd1aycgfCAndXInIHwgJ3V6JyB8ICd2aScgfCAnemgtaGFucycgfCAnemgtaGFudCcsXG4gICAgKTogQ2FuY2VsYWJsZVByb21pc2U8UmVjb3JkPHN0cmluZywgYW55Pj4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3NjaGVtYS8nLFxuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAnZm9ybWF0JzogZm9ybWF0LFxuICAgICAgICAgICAgICAgICdsYW5nJzogbGFuZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbIk9wZW5BUEkiLCJyZXF1ZXN0IiwiX19yZXF1ZXN0IiwiU2NoZW1hU2VydmljZSIsInNjaGVtYVJldHJpZXZlIiwiZm9ybWF0IiwibGFuZyIsIm1ldGhvZCIsInVybCIsInF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/services/SchemaService.ts\n");

/***/ }),

/***/ "(api)/./src/nodes/schemas/t7/gen/services/TokenService.ts":
/*!***********************************************************!*\
  !*** ./src/nodes/schemas/t7/gen/services/TokenService.ts ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TokenService\": () => (/* binding */ TokenService)\n/* harmony export */ });\n/* harmony import */ var _core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/OpenAPI */ \"(api)/./src/nodes/schemas/t7/gen/core/OpenAPI.ts\");\n/* harmony import */ var _core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/request */ \"(api)/./src/nodes/schemas/t7/gen/core/request.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_request__WEBPACK_IMPORTED_MODULE_1__]);\n_core_request__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* istanbul ignore file */ /* tslint:disable */ /* eslint-disable */ \n\nclass TokenService {\n    /**\n     * Takes a set of user credentials and returns an access and refresh JSON web\n     * token pair to prove the authentication of those credentials.\n     * @param requestBody\n     * @returns MyTokenObtainPair\n     * @throws ApiError\n     */ static tokenCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/token/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Takes a refresh type JSON web token and returns an access type JSON web\n     * token if the refresh token is valid.\n     * @param requestBody\n     * @returns TokenRefresh\n     * @throws ApiError\n     */ static tokenRefreshCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/token/refresh/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n    /**\n     * Takes a token and indicates if it is valid.  This view provides no\n     * information about a token's fitness for a particular use.\n     * @param requestBody\n     * @returns TokenVerify\n     * @throws ApiError\n     */ static tokenVerifyCreate(requestBody) {\n        return (0,_core_request__WEBPACK_IMPORTED_MODULE_1__.request)(_core_OpenAPI__WEBPACK_IMPORTED_MODULE_0__.OpenAPI, {\n            method: \"POST\",\n            url: \"/api/token/verify/\",\n            body: requestBody,\n            mediaType: \"application/json\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbm9kZXMvc2NoZW1hcy90Ny9nZW4vc2VydmljZXMvVG9rZW5TZXJ2aWNlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdCQUF3QixHQUN4QixrQkFBa0IsR0FDbEIsa0JBQWtCLEdBTXdCO0FBQ2E7QUFFaEQsTUFBTUc7SUFFVDs7Ozs7O0tBTUMsR0FDRCxPQUFjQyxZQUNWQyxXQUE4QixFQUNNO1FBQ3BDLE9BQU9ILHNEQUFTQSxDQUFDRixrREFBT0EsRUFBRTtZQUN0Qk0sUUFBUTtZQUNSQyxLQUFLO1lBQ0xDLE1BQU1IO1lBQ05JLFdBQVc7UUFDZjtJQUNKO0lBRUE7Ozs7OztLQU1DLEdBQ0QsT0FBY0MsbUJBQ1ZMLFdBQXlCLEVBQ007UUFDL0IsT0FBT0gsc0RBQVNBLENBQUNGLGtEQUFPQSxFQUFFO1lBQ3RCTSxRQUFRO1lBQ1JDLEtBQUs7WUFDTEMsTUFBTUg7WUFDTkksV0FBVztRQUNmO0lBQ0o7SUFFQTs7Ozs7O0tBTUMsR0FDRCxPQUFjRSxrQkFDVk4sV0FBd0IsRUFDTTtRQUM5QixPQUFPSCxzREFBU0EsQ0FBQ0Ysa0RBQU9BLEVBQUU7WUFDdEJNLFFBQVE7WUFDUkMsS0FBSztZQUNMQyxNQUFNSDtZQUNOSSxXQUFXO1FBQ2Y7SUFDSjtBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9ub2Rlcy9zY2hlbWFzL3Q3L2dlbi9zZXJ2aWNlcy9Ub2tlblNlcnZpY2UudHM/YTU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgdHlwZSB7IE15VG9rZW5PYnRhaW5QYWlyIH0gZnJvbSAnLi4vbW9kZWxzL015VG9rZW5PYnRhaW5QYWlyJztcbmltcG9ydCB0eXBlIHsgVG9rZW5SZWZyZXNoIH0gZnJvbSAnLi4vbW9kZWxzL1Rva2VuUmVmcmVzaCc7XG5pbXBvcnQgdHlwZSB7IFRva2VuVmVyaWZ5IH0gZnJvbSAnLi4vbW9kZWxzL1Rva2VuVmVyaWZ5JztcblxuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUvQ2FuY2VsYWJsZVByb21pc2UnO1xuaW1wb3J0IHsgT3BlbkFQSSB9IGZyb20gJy4uL2NvcmUvT3BlbkFQSSc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIF9fcmVxdWVzdCB9IGZyb20gJy4uL2NvcmUvcmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBUb2tlblNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBzZXQgb2YgdXNlciBjcmVkZW50aWFscyBhbmQgcmV0dXJucyBhbiBhY2Nlc3MgYW5kIHJlZnJlc2ggSlNPTiB3ZWJcbiAgICAgKiB0b2tlbiBwYWlyIHRvIHByb3ZlIHRoZSBhdXRoZW50aWNhdGlvbiBvZiB0aG9zZSBjcmVkZW50aWFscy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdEJvZHlcbiAgICAgKiBAcmV0dXJucyBNeVRva2VuT2J0YWluUGFpclxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHRva2VuQ3JlYXRlKFxuICAgICAgICByZXF1ZXN0Qm9keTogTXlUb2tlbk9idGFpblBhaXIsXG4gICAgKTogQ2FuY2VsYWJsZVByb21pc2U8TXlUb2tlbk9idGFpblBhaXI+IHtcbiAgICAgICAgcmV0dXJuIF9fcmVxdWVzdChPcGVuQVBJLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvdG9rZW4vJyxcbiAgICAgICAgICAgIGJvZHk6IHJlcXVlc3RCb2R5LFxuICAgICAgICAgICAgbWVkaWFUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgcmVmcmVzaCB0eXBlIEpTT04gd2ViIHRva2VuIGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0eXBlIEpTT04gd2ViXG4gICAgICogdG9rZW4gaWYgdGhlIHJlZnJlc2ggdG9rZW4gaXMgdmFsaWQuXG4gICAgICogQHBhcmFtIHJlcXVlc3RCb2R5XG4gICAgICogQHJldHVybnMgVG9rZW5SZWZyZXNoXG4gICAgICogQHRocm93cyBBcGlFcnJvclxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdG9rZW5SZWZyZXNoQ3JlYXRlKFxuICAgICAgICByZXF1ZXN0Qm9keTogVG9rZW5SZWZyZXNoLFxuICAgICk6IENhbmNlbGFibGVQcm9taXNlPFRva2VuUmVmcmVzaD4ge1xuICAgICAgICByZXR1cm4gX19yZXF1ZXN0KE9wZW5BUEksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiAnL2FwaS90b2tlbi9yZWZyZXNoLycsXG4gICAgICAgICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIG1lZGlhVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIHRva2VuIGFuZCBpbmRpY2F0ZXMgaWYgaXQgaXMgdmFsaWQuICBUaGlzIHZpZXcgcHJvdmlkZXMgbm9cbiAgICAgKiBpbmZvcm1hdGlvbiBhYm91dCBhIHRva2VuJ3MgZml0bmVzcyBmb3IgYSBwYXJ0aWN1bGFyIHVzZS5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdEJvZHlcbiAgICAgKiBAcmV0dXJucyBUb2tlblZlcmlmeVxuICAgICAqIEB0aHJvd3MgQXBpRXJyb3JcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHRva2VuVmVyaWZ5Q3JlYXRlKFxuICAgICAgICByZXF1ZXN0Qm9keTogVG9rZW5WZXJpZnksXG4gICAgKTogQ2FuY2VsYWJsZVByb21pc2U8VG9rZW5WZXJpZnk+IHtcbiAgICAgICAgcmV0dXJuIF9fcmVxdWVzdChPcGVuQVBJLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvdG9rZW4vdmVyaWZ5LycsXG4gICAgICAgICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIG1lZGlhVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJPcGVuQVBJIiwicmVxdWVzdCIsIl9fcmVxdWVzdCIsIlRva2VuU2VydmljZSIsInRva2VuQ3JlYXRlIiwicmVxdWVzdEJvZHkiLCJtZXRob2QiLCJ1cmwiLCJib2R5IiwibWVkaWFUeXBlIiwidG9rZW5SZWZyZXNoQ3JlYXRlIiwidG9rZW5WZXJpZnlDcmVhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/nodes/schemas/t7/gen/services/TokenService.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/authors/[author_id]/posts/[post_id]/index.ts":
/*!********************************************************************!*\
  !*** ./src/pages/api/authors/[author_id]/posts/[post_id]/index.ts ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/nodes */ \"(api)/./src/nodes/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_nodes__WEBPACK_IMPORTED_MODULE_0__]);\n_nodes__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\n\nasync function handler(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            let { author_id , post_id  } = req.query;\n            const results = await _nodes__WEBPACK_IMPORTED_MODULE_0__.NodeManager.getPost(author_id, post_id);\n            return res.status(200).json(results);\n        } catch (e) {\n            console.error(e);\n            return res.status(200).json(false);\n        }\n    }\n    if (req.method === \"PUT\") {\n        try {\n            let { author_id , post_id  } = req.query;\n            const results = await _nodes__WEBPACK_IMPORTED_MODULE_0__.NodeManager.updatePost(author_id, post_id, req.body);\n            return res.status(200).json(results);\n        } catch (e) {\n            console.error(e);\n            return res.status(200).json(false);\n        }\n    }\n    if (req.method === \"DELETE\") {\n        try {\n            let { author_id , post_id  } = req.query;\n            const results = await _nodes__WEBPACK_IMPORTED_MODULE_0__.NodeManager.deletePost(author_id, post_id);\n            return res.status(200).json(results);\n        } catch (e) {\n            console.error(e);\n            return res.status(200).json(false);\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL2F1dGhvcnMvW2F1dGhvcl9pZF0vcG9zdHMvW3Bvc3RfaWRdL2luZGV4LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsNkVBQTZFO0FBRXpDO0FBRXJCLGVBQWVDLFFBQzVCQyxHQUFtQixFQUNuQkMsR0FBb0IsRUFDcEI7SUFDRSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUNyQixJQUFJO1lBQ0wsSUFBSSxFQUFDQyxVQUFTLEVBQUVDLFFBQU8sRUFBQyxHQUFHSixJQUFJSyxLQUFLO1lBRXBDLE1BQU1DLFVBQVUsTUFBTVIsdURBQW1CLENBQUNLLFdBQXFCQztZQUUvRCxPQUFPSCxJQUFJTyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDSDtRQUU1QixFQUNBLE9BQU9JLEdBQUc7WUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtZQUNkLE9BQU9ULElBQUlPLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUMsS0FBSztRQUNyQztJQUNKLENBQUM7SUFFRCxJQUFJVCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUNsQixJQUFJO1lBQ0osSUFBSSxFQUFDQyxVQUFTLEVBQUVDLFFBQU8sRUFBQyxHQUFHSixJQUFJSyxLQUFLO1lBQ3BDLE1BQU1DLFVBQVUsTUFBTVIsMERBQXNCLENBQUNLLFdBQXFCQyxTQUFtQkosSUFBSWMsSUFBSTtZQUU3RixPQUFPYixJQUFJTyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDSDtRQUU1QixFQUNBLE9BQU9JLEdBQUc7WUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtZQUNkLE9BQU9ULElBQUlPLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUMsS0FBSztRQUNyQztJQUNSLENBQUM7SUFFRCxJQUFJVCxJQUFJRSxNQUFNLEtBQUssVUFBVTtRQUN4QixJQUFJO1lBQ0wsSUFBSSxFQUFDQyxVQUFTLEVBQUVDLFFBQU8sRUFBQyxHQUFHSixJQUFJSyxLQUFLO1lBQ3BDLE1BQU1DLFVBQVUsTUFBTVIsMERBQXNCLENBQUNLLFdBQXFCQztZQUVsRSxPQUFPSCxJQUFJTyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDSDtRQUU1QixFQUNBLE9BQU9JLEdBQUc7WUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtZQUNkLE9BQU9ULElBQUlPLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUMsS0FBSztRQUNyQztJQUNKLENBQUM7QUFFTCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvcGFnZXMvYXBpL2F1dGhvcnMvW2F1dGhvcl9pZF0vcG9zdHMvW3Bvc3RfaWRdL2luZGV4LnRzPzM0YzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTmV4dC5qcyBBUEkgcm91dGUgc3VwcG9ydDogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJvdXRlcy9pbnRyb2R1Y3Rpb25cbmltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnXG5pbXBvcnQge05vZGVNYW5hZ2VyfSBmcm9tICdAL25vZGVzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2Vcbikge1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJykge1xuICAgICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHthdXRob3JfaWQsIHBvc3RfaWR9ID0gcmVxLnF1ZXJ5O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IE5vZGVNYW5hZ2VyLmdldFBvc3QoYXV0aG9yX2lkIGFzIHN0cmluZywgcG9zdF9pZCBhcyBzdHJpbmcpO1xuXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHRzKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXEubWV0aG9kID09PSAnUFVUJykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB7YXV0aG9yX2lkLCBwb3N0X2lkfSA9IHJlcS5xdWVyeTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBOb2RlTWFuYWdlci51cGRhdGVQb3N0KGF1dGhvcl9pZCBhcyBzdHJpbmcsIHBvc3RfaWQgYXMgc3RyaW5nLCByZXEuYm9keSk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0RFTEVURScpIHtcbiAgICAgICAgIHRyeSB7XG4gICAgICAgIGxldCB7YXV0aG9yX2lkLCBwb3N0X2lkfSA9IHJlcS5xdWVyeTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IE5vZGVNYW5hZ2VyLmRlbGV0ZVBvc3QoYXV0aG9yX2lkIGFzIHN0cmluZywgcG9zdF9pZCBhcyBzdHJpbmcpO1xuXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHRzKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn1cbiAgIl0sIm5hbWVzIjpbIk5vZGVNYW5hZ2VyIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImF1dGhvcl9pZCIsInBvc3RfaWQiLCJxdWVyeSIsInJlc3VsdHMiLCJnZXRQb3N0Iiwic3RhdHVzIiwianNvbiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJ1cGRhdGVQb3N0IiwiYm9keSIsImRlbGV0ZVBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/authors/[author_id]/posts/[post_id]/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/authors/[author_id]/posts/[post_id]/index.ts"));
module.exports = __webpack_exports__;

})();