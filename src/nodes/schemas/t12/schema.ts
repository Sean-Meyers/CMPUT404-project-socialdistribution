/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["_list"];
    post: operations["_create"];
  };
  "/post/authors/{userId}/like/{postId}": {
    /** @description Don't use this get, this is just for testing. */
    get: operations["post_authors_like_read"];
    /** @description Create a like to specified post, no data required. */
    post: operations["post_authors_like_create"];
  };
  "/post/authors/{userId}/posts/create": {
    /** @description Don't use this get, this is just for testing. */
    get: operations["post_authors_posts_create_list"];
    /** @description Create a new post. */
    post: operations["post_authors_posts_create_create"];
  };
  "/post/authors/{userId}/posts/{postId}/comment": {
    /** @description Don't use this get, this is just for testing. */
    get: operations["post_authors_posts_comment_list"];
    /** @description Create a new comment on the specified post. */
    post: operations["post_authors_posts_comment_create"];
  };
  "/post/authors/{userId}/posts/{postId}/comments/{commentId}/likes": {
    /** @description Don't use this get, this is just for testing. */
    get: operations["post_authors_posts_comments_likes_list"];
    /** @description Create a like to specified comment under specified post, no data required. */
    post: operations["post_authors_posts_comments_likes_create"];
  };
  "/post/authors/{userId}/share/{postId}": {
    /** @description Don't use this get, this is just for testing. */
    get: operations["post_authors_share_read"];
    /** @description Share post from current author to another author. */
    post: operations["post_authors_share_create"];
  };
  "/service/authors/": {
    /** @description Get all authors' informations. */
    get: operations["service_authors_list"];
  };
  "/service/authors/{id}/": {
    /** @description Get informations for specific author. */
    get: operations["service_authors_read"];
    /** @description Modify author's information. */
    post: operations["service_authors_create"];
  };
  "/service/authors/{id}/comments/liked": {
    /** @description Get all comments liked by specific author. */
    get: operations["service_authors_comments_liked_list"];
  };
  "/service/authors/{id}/comments/{commentId}/likes": {
    /** @description Get all the likes for a specific comment. */
    get: operations["service_authors_comments_likes_list"];
  };
  "/service/authors/{id}/followRequests/{foreignPk}": {
    /** @description Don't use this GET, use getFollowers instead. */
    get: operations["service_authors_followRequests_read"];
    /** @description Create a follow request current author. */
    post: operations["service_authors_followRequests_create"];
  };
  "/service/authors/{id}/followers/": {
    /** @description Get all the followers taht follow current user. */
    get: operations["service_authors_followers_list"];
  };
  "/service/authors/{id}/followers/{foreignPk}": {
    /** @description Get information of a specific follower. */
    get: operations["service_authors_followers_read"];
    /** @description Add a new following relation, make sure the user send out follow request put after /followers/author_uuid. */
    put: operations["service_authors_followers_update"];
    /** @description Delete a following relation. */
    delete: operations["service_authors_followers_delete"];
  };
  "/service/authors/{id}/following/": {
    /** @description Get all the users followed by current user. */
    get: operations["service_authors_following_list"];
  };
  "/service/authors/{id}/inbox": {
    /** @description Get all the posts, comments, follow requests and likes in specific author's inbox. */
    get: operations["service_authors_inbox_list"];
    /** @description ###attention: only followRequest is valid now.### Create posts or comments or follow requests or likes to specific author's inbox. */
    post: operations["service_authors_inbox_create"];
    /** @description Clear inbox for specific author. */
    delete: operations["service_authors_inbox_delete"];
  };
  "/service/authors/{id}/liked": {
    /** @description Get all the posts liked by specific author. */
    get: operations["service_authors_liked_list"];
  };
  "/service/authors/{id}/posts/": {
    /** @description Get posts create by specific author. */
    get: operations["service_authors_posts_list"];
    /** @description Create a new post, don't use this one, was used for test. */
    post: operations["service_authors_posts_create"];
  };
  "/service/authors/{id}/posts/{postsId}/": {
    /** @description Get a specific post. */
    get: operations["service_authors_posts_read"];
    /** @description Update a specific post, non required. */
    put: operations["service_authors_posts_update"];
    /** @description Delete a specific post. */
    delete: operations["service_authors_posts_delete"];
  };
  "/service/authors/{id}/posts/{postsId}/comments": {
    /** @description Get all the comments of specific post. */
    get: operations["service_authors_posts_comments_list"];
    /** @description Post new comments. Don't use this one, just for test. */
    post: operations["service_authors_posts_comments_create"];
  };
  "/service/authors/{id}/posts/{postsId}/comments/{commentId}": {
    /** @description Get a specific comment. */
    get: operations["service_authors_posts_comments_read"];
  };
  "/service/authors/{id}/posts/{postsId}/image": {
    /** @description Get the image of a post. */
    get: operations["service_authors_posts_image_list"];
  };
  "/service/authors/{id}/posts/{postsId}/likes": {
    /** @description Get all the likes for a specific post. */
    get: operations["service_authors_posts_likes_list"];
  };
  "/service/posts/": {
    /** @description Get all public posts. */
    get: operations["service_posts_list"];
  };
  "/signin/": {
    get: operations["signin_list"];
    post: operations["signin_create"];
  };
  "/signup/": {
    get: operations["signup_list"];
    post: operations["signup_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  _list: {
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  _create: {
    requestBody: {
      content: {
        "application/json": {
          /** @description username */
          username: string;
          /** @description password */
          password: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** @description username */
            username: string;
            /** @description password */
            password: string;
          };
        };
      };
    };
  };
  /** @description Don't use this get, this is just for testing. */
  post_authors_like_read: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a like to specified post, no data required. */
  post_authors_like_create: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    responses: {
      201: {
        content: {
        };
      };
    };
  };
  /** @description Don't use this get, this is just for testing. */
  post_authors_posts_create_list: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a new post. */
  post_authors_posts_create_create: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Title is required 
           * @example Sample Title
           */
          title: string;
          /** @example Sample Description */
          description?: string;
          /**
           * @description Content is required 
           * @example Sample Content
           */
          content: string;
          /** @example PUBLIC */
          visibility?: string;
          /** @example text/plain */
          content_type?: string;
          /** @example Category1, Category2 */
          categories?: string;
          /**
           * @description Image is optional(image post or text post) 
           * @example image.png
           */
          image: Record<string, never>;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /**
             * @description Title is required 
             * @example Sample Title
             */
            title: string;
            /** @example Sample Description */
            description?: string;
            /**
             * @description Content is required 
             * @example Sample Content
             */
            content: string;
            /** @example PUBLIC */
            visibility?: string;
            /** @example text/plain */
            content_type?: string;
            /** @example Category1, Category2 */
            categories?: string;
            /**
             * @description Image is optional(image post or text post) 
             * @example image.png
             */
            image: Record<string, never>;
          };
        };
      };
    };
  };
  /** @description Don't use this get, this is just for testing. */
  post_authors_posts_comment_list: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a new comment on the specified post. */
  post_authors_posts_comment_create: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Comment text 
           * @example This is a sample comment.
           */
          comment: string;
          /**
           * @description Content type of the comment 
           * @example text/plain
           */
          content_type?: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /**
             * @description Comment text 
             * @example This is a sample comment.
             */
            comment: string;
            /**
             * @description Content type of the comment 
             * @example text/plain
             */
            content_type?: string;
          };
        };
      };
    };
  };
  /** @description Don't use this get, this is just for testing. */
  post_authors_posts_comments_likes_list: {
    parameters: {
      path: {
        commentId: string;
        postId: string;
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a like to specified comment under specified post, no data required. */
  post_authors_posts_comments_likes_create: {
    parameters: {
      path: {
        commentId: string;
        postId: string;
        userId: string;
      };
    };
    responses: {
      201: {
        content: {
        };
      };
    };
  };
  /** @description Don't use this get, this is just for testing. */
  post_authors_share_read: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Share post from current author to another author. */
  post_authors_share_create: {
    parameters: {
      path: {
        postId: string;
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description author uuid want receive this share 
           * @example 4e456d55-295b-4a9f-9eh1-3c71732e9f5e
           */
          sendTo: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /**
             * @description author uuid want receive this share 
             * @example 4e456d55-295b-4a9f-9eh1-3c71732e9f5e
             */
            sendTo: string;
          };
        };
      };
    };
  };
  /** @description Get all authors' informations. */
  service_authors_list: {
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get informations for specific author. */
  service_authors_read: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Modify author's information. */
  service_authors_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Github URL */
          github: string;
          /** @description Profile Image URL */
          profileImage: string;
          /** @description Host URL */
          host: string;
          /** @description Author URL */
          url: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** @description Github URL */
            github: string;
            /** @description Profile Image URL */
            profileImage: string;
            /** @description Host URL */
            host: string;
            /** @description Author URL */
            url: string;
          };
        };
      };
    };
  };
  /** @description Get all comments liked by specific author. */
  service_authors_comments_liked_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get all the likes for a specific comment. */
  service_authors_comments_likes_list: {
    parameters: {
      path: {
        commentId: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Don't use this GET, use getFollowers instead. */
  service_authors_followRequests_read: {
    parameters: {
      path: {
        foreignPk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a follow request current author. */
  service_authors_followRequests_create: {
    parameters: {
      path: {
        foreignPk: string;
        id: string;
      };
    };
    responses: {
      201: {
        content: {
        };
      };
    };
  };
  /** @description Get all the followers taht follow current user. */
  service_authors_followers_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get information of a specific follower. */
  service_authors_followers_read: {
    parameters: {
      path: {
        foreignPk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Add a new following relation, make sure the user send out follow request put after /followers/author_uuid. */
  service_authors_followers_update: {
    parameters: {
      path: {
        foreignPk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Delete a following relation. */
  service_authors_followers_delete: {
    parameters: {
      path: {
        foreignPk: string;
        id: string;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /** @description Get all the users followed by current user. */
  service_authors_following_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get all the posts, comments, follow requests and likes in specific author's inbox. */
  service_authors_inbox_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description ###attention: only followRequest is valid now.### Create posts or comments or follow requests or likes to specific author's inbox. */
  service_authors_inbox_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          followRequest?: {
            /** @description Type of the object, post/follow/like/comment. */
            type: string;
            /** @description Summary of the follow. */
            summary: string | null;
            author: {
              /** @description Type of the object, author. */
              type?: string;
              /** @description author.id */
              id: string;
              /** @description author.url */
              url: string;
              /** @description author.host */
              host: string;
              /** @description author.displayname */
              displayName: string;
              /** @description author.github */
              github: string;
              /** @description author.profileimage */
              profileImage: string | null;
            };
          };
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            followRequest?: {
              /** @description Type of the object, post/follow/like/comment. */
              type: string;
              /** @description Summary of the follow. */
              summary: string | null;
              author: {
                /** @description Type of the object, author. */
                type?: string;
                /** @description author.id */
                id: string;
                /** @description author.url */
                url: string;
                /** @description author.host */
                host: string;
                /** @description author.displayname */
                displayName: string;
                /** @description author.github */
                github: string;
                /** @description author.profileimage */
                profileImage: string | null;
              };
            };
          };
        };
      };
    };
  };
  /** @description Clear inbox for specific author. */
  service_authors_inbox_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /** @description Get all the posts liked by specific author. */
  service_authors_liked_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get posts create by specific author. */
  service_authors_posts_list: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Create a new post, don't use this one, was used for test. */
  service_authors_posts_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Title of the post */
          title: string;
          /** @description Source of the post */
          source: string;
          /** @description Origin of the post */
          origin: string;
          /** @description Description of the post */
          description: string;
          /** @description Content type of the post */
          contentType: string;
          /** @description Content of the post */
          content: string;
          /** @description Categories of the post */
          categories: string;
          /** @description Visibility of the post */
          visibility: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** @description Title of the post */
            title: string;
            /** @description Source of the post */
            source: string;
            /** @description Origin of the post */
            origin: string;
            /** @description Description of the post */
            description: string;
            /** @description Content type of the post */
            contentType: string;
            /** @description Content of the post */
            content: string;
            /** @description Categories of the post */
            categories: string;
            /** @description Visibility of the post */
            visibility: string;
          };
        };
      };
    };
  };
  /** @description Get a specific post. */
  service_authors_posts_read: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Update a specific post, non required. */
  service_authors_posts_update: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Delete a specific post. */
  service_authors_posts_delete: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /** @description Get all the comments of specific post. */
  service_authors_posts_comments_list: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Post new comments. Don't use this one, just for test. */
  service_authors_posts_comments_create: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      201: {
        content: {
        };
      };
    };
  };
  /** @description Get a specific comment. */
  service_authors_posts_comments_read: {
    parameters: {
      path: {
        commentId: string;
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get the image of a post. */
  service_authors_posts_image_list: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get all the likes for a specific post. */
  service_authors_posts_likes_list: {
    parameters: {
      path: {
        id: string;
        postsId: string;
      };
    };
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  /** @description Get all public posts. */
  service_posts_list: {
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  signin_list: {
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  signin_create: {
    requestBody: {
      content: {
        "application/json": {
          /** @description username */
          username: string;
          /** @description password */
          password: string;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** @description username */
            username: string;
            /** @description password */
            password: string;
          };
        };
      };
    };
  };
  signup_list: {
    responses: {
      200: {
        content: {
        };
      };
    };
  };
  signup_create: {
    requestBody: {
      content: {
        "application/json": {
          /** @description username */
          username: string;
          /** @description password */
          password: string;
          /** @description displayName */
          displayName: string;
          /** @description github */
          github?: string;
          /** @description profileImage */
          profileImage?: Record<string, never>;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** @description username */
            username: string;
            /** @description password */
            password: string;
            /** @description displayName */
            displayName: string;
            /** @description github */
            github?: string;
            /** @description profileImage */
            profileImage?: Record<string, never>;
          };
        };
      };
    };
  };
}
